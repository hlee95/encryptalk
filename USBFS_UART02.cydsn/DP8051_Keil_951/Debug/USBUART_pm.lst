C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_PM
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBUART_pm.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_pm.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) 
                    -PR(.\DP8051_Keil_951\Debug/USBUART_pm.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\USBUART_pm.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USBUART_pm.c
   3          * \version 3.0
   4          *
   5          * \brief
   6          *  This file provides Suspend/Resume APIs implementation.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USBUART_pvt.h"
  17          #include "USBUART_Dp.h"
  18          #include "cyapicallbacks.h"
  19          
  20          /***************************************
  21          * Custom Declarations
  22          ***************************************/
  23          /* `#START PM_CUSTOM_DECLARATIONS` Place your declaration here */
  24          
  25          /* `#END` */
  26          
  27          
  28          /***************************************
  29          * Local data allocation
  30          ***************************************/
  31          
  32          static USBUART_BACKUP_STRUCT  USBUART_backup;
  33          
  34          #if (USBUART_DP_ISR_ACTIVE)
  35              /*******************************************************************************
  36              * Function Name: USBUART_DP_ISR
  37              ****************************************************************************//**
  38              *
  39              *  This Interrupt Service Routine handles DP pin changes for wake-up from
  40              *  the sleep mode.
  41              *
  42              *******************************************************************************/
  43              CY_ISR(USBUART_DP_ISR)
  44              {
  45   1          #ifdef USBUART_DP_ISR_ENTRY_CALLBACK
                      USBUART_DP_ISR_EntryCallback();
                  #endif /* (USBUART_DP_ISR_ENTRY_CALLBACK) */
  48   1      
  49   1              /* `#START DP_USER_CODE` Place your code here */
  50   1      
  51   1              /* `#END` */
  52   1      
  53   1              (void) USBUART_Dp_ClearInterrupt();
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 2   

  54   1                      
  55   1              #ifdef USBUART_DP_ISR_EXIT_CALLBACK
                      USBUART_DP_ISR_ExitCallback();
                  #endif /* (USBUART_DP_ISR_EXIT_CALLBACK) */
  58   1          }
  59          #endif /* (USBUART_DP_ISR_ACTIVE) */
  60          
  61          
  62          /*******************************************************************************
  63          * Function Name: USBUART_SaveConfig
  64          ****************************************************************************//**
  65          *
  66          *  Saves the current user configuration.
  67          *
  68          * \reentrant
  69          *  No.
  70          *
  71          *******************************************************************************/
  72          void USBUART_SaveConfig(void) 
  73          {
  74   1          /* Empty function added for the compatibility purpose. */
  75   1      }
  76          
  77          
  78          /*******************************************************************************
  79          * Function Name: USBUART_RestoreConfig
  80          ****************************************************************************//**
  81          *
  82          *  Restores the current user configuration.
  83          *
  84          * \reentrant
  85          *  No.
  86          *
  87          *******************************************************************************/
  88          void USBUART_RestoreConfig(void) 
  89          {
  90   1          if (USBUART_configuration != 0u)
  91   1          {
  92   2              USBUART_ConfigReg();
  93   2              USBUART_EpStateInit();
  94   2          }
  95   1      }
  96          
  97          
  98          /*******************************************************************************
  99          * Function Name: USBUART_Suspend
 100          ****************************************************************************//**
 101          *
 102          *  This function prepares the USBFS component to enter low power mode. The 
 103          *  interrupt on falling edge on Dp pin is configured to wakeup device when the 
 104          *  host drives resume condition. The pull-up is enabled on the Dp line while 
 105          *  device is in low power mode. The supported low power modes are Deep Sleep 
 106          *  (PSoC 4200L) and Sleep (PSoC 3/ PSoC 5LP).
 107          *  
 108          *  *Note* For PSoC 4200L devices, this function should not be called before 
 109          *  entering Sleep.
 110          *  
 111          *  *Note* After enter low power mode, the data which is left in the IN or OUT 
 112          *  endpoint buffers is not restored after wakeup and lost. Therefore it should 
 113          *  be stored in the SRAM for OUT endpoint or read by the host for IN endpoint 
 114          *  before enter low power mode.
 115          *
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 3   

 116          * \globalvars
 117          *  USBUART_backup.enable:  modified.
 118          *
 119          * \reentrant
 120          *  No.
 121          *
 122          *******************************************************************************/
 123          void USBUART_Suspend(void) 
 124          {
 125   1          uint8 enableInterrupts;
 126   1      
 127   1          enableInterrupts = CyEnterCriticalSection();
 128   1      
 129   1          if (0u != (USBUART_CR0_REG & USBUART_CR0_ENABLE))
 130   1          {
 131   2              /* USB block is enabled. */
 132   2              USBUART_backup.enableState = 1u;
 133   2      
 134   2          #if (USBUART_EP_MANAGEMENT_DMA)
                      USBUART_Stop_DMA(USBUART_MAX_EP);
                  #endif /* (USBUART_EP_MANAGEMENT_DMA) */
 137   2      
 138   2          #if (CY_PSOC4)
                      /* Suspend enter sequence. */
                      USBUART_POWER_CTRL_REG |= (USBUART_POWER_CTRL_SUSPEND |
                                                          USBUART_POWER_CTRL_SUSPEND_DEL);
              
                      /* Store state of USB regulator and disable it. */
                      USBUART_backup.mode = (uint8)  (USBUART_CR1_REG & USBUART_CR1_REG_ENABLE);
                      USBUART_CR1_REG    &= (uint32) ~USBUART_CR1_REG_ENABLE;
                      
                      /* Store SIE interrupt sources. Valid bits are 0 - 4. */
                      USBUART_backup.intrSeiMask = (uint8) USBUART_INTR_SIE_MASK_REG;
              
                  #else
 151   2              /* Ensure USB transmit enable is low (USB_USBIO_CR0.ten). - Manual Transmission - Disabled. */
 152   2              USBUART_USBIO_CR0_REG &= (uint8) ~USBUART_USBIO_CR0_TEN;
 153   2              CyDelayUs(USBUART_WAIT_REG_STABILITY_50NS);  /*~50ns delay. */
 154   2      
 155   2              /* Disable the USBIO by asserting PM.USB_CR0.fsusbio_pd_n(Inverted) and pd_pullup_hv(Inverted) hig
             -h. */
 156   2              USBUART_PM_USB_CR0_REG &= (uint8) ~(USBUART_PM_USB_CR0_PD_N |
 157   2                                                           USBUART_PM_USB_CR0_PD_PULLUP_N);
 158   2      
 159   2              /* Disable the SIE. */
 160   2              USBUART_CR0_REG &= (uint8) ~USBUART_CR0_ENABLE;
 161   2      
 162   2              CyDelayUs(USBUART_WAIT_REG_STABILITY_50NS);  /* ~50ns delay. */
 163   2              /* Store mode and disable VRegulator. */
 164   2              USBUART_backup.mode = (uint8) (USBUART_CR1_REG & USBUART_CR1_REG_ENABLE);
 165   2              USBUART_CR1_REG    &= (uint8) ~USBUART_CR1_REG_ENABLE;
 166   2      
 167   2              CyDelayUs(USBUART_WAIT_REG_STABILITY_1US); /* min 0.5us delay required. */
 168   2      
 169   2              /* Disable the USBIO reference by setting PM.USB_CR0.fsusbio_ref_en.*/
 170   2              USBUART_PM_USB_CR0_REG &= (uint8) ~USBUART_PM_USB_CR0_REF_EN;
 171   2      
 172   2              /* Switch DP and DM terminals to GPIO mode and disconnect 1.5k pull-up. */
 173   2              USBUART_USBIO_CR1_REG |= USBUART_USBIO_CR1_IOMODE;
 174   2      
 175   2              /* Disable USBFS block. */
 176   2              /* Clear power active and standby mode templates: disable USB block. */
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 4   

 177   2              USBUART_PM_ACT_CFG_REG  &= (uint8) ~USBUART_PM_ACT_EN_FSUSB;
 178   2              USBUART_PM_STBY_CFG_REG &= (uint8) ~USBUART_PM_STBY_EN_FSUSB;
 179   2      
 180   2              CyDelayUs(USBUART_WAIT_REG_STABILITY_1US); /* min 0.5us delay required. */
 181   2          #endif /* (CY_PSOC4) */
 182   2          }
 183   1          else
 184   1          {
 185   2              USBUART_backup.enableState = 0u;
 186   2          }
 187   1      
 188   1          CyExitCriticalSection(enableInterrupts);
 189   1      
 190   1      #if (USBUART_DP_ISR_ACTIVE)
 191   1          /* Clear active mode Dp interrupt source history. */
 192   1          (void) USBUART_Dp_ClearInterrupt();
 193   1          CyIntClearPending(USBUART_DP_INTC_VECT_NUM);
 194   1      
 195   1          CyIntEnable      (USBUART_DP_INTC_VECT_NUM);
 196   1      #endif /* (USBUART_DP_ISR_ACTIVE). */
 197   1      }
 198          
 199          
 200          /*******************************************************************************
 201          * Function Name: USBUART_Resume
 202          ****************************************************************************//**
 203          *
 204          *  This function prepares the USBFS component for active mode operation after 
 205          *  exit low power mode. It restores the component active mode configuration such 
 206          *  as device address assigned previously by the host, endpoints buffer and disables 
 207          *  interrupt on Dp pin.
 208          *  The supported low power modes are Deep Sleep (PSoC 4200L) and Sleep 
 209          *  (PSoC 3/ PSoC 5LP).
 210          *  
 211          *  *Note* For PSoC 4200L devices, this function should not be called after 
 212          *  exiting Sleep.
 213          *  
 214          *  *Note* To resume communication with the host, the data endpoints must be 
 215          *  managed: the OUT endpoints must be enabled and IN endpoints must be loaded 
 216          *  with data. For DMA with Automatic Buffer Management, all endpoints buffers 
 217          *  must be initialized again before making them available to the host.
 218          *
 219          *
 220          * \globalvars
 221          *  USBUART_backup - checked.
 222          *
 223          * \reentrant
 224          *  No.
 225          *
 226          *******************************************************************************/
 227          void USBUART_Resume(void) 
 228          {
 229   1          uint8 enableInterrupts;
 230   1      
 231   1          enableInterrupts = CyEnterCriticalSection();
 232   1      
 233   1          if (0u != USBUART_backup.enableState)
 234   1          {
 235   2          #if (USBUART_DP_ISR_ACTIVE)
 236   2              CyIntDisable(USBUART_DP_INTC_VECT_NUM);
 237   2          #endif /* (USBUART_DP_ISR_ACTIVE) */
 238   2      
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 5   

 239   2          #if (CY_PSOC4)
                      /* Enable clock to USB IP. */
                      USBUART_USB_CLK_EN_REG |= USBUART_USB_CLK_CSR_CLK_EN;
              
                      /* Restore arbiter configuration for DMA transfers. */
                      #if (USBUART_EP_MANAGEMENT_DMA)
                          #if (USBUART_ARB_ISR_ACTIVE)
                              /* Enable ARB EP interrupt sources. */
                              USBUART_ARB_INT_EN_REG = USBUART_DEFAULT_ARB_INT_EN;
                          #endif /* (USBUART_EP_MANAGEMENT_DMA) */
              
                          /* Configure arbiter for Manual or Auto DMA operation and clear 
                          * configuration completion. 
                          */
                          USBUART_ARB_CFG_REG = USBUART_DEFAULT_ARB_CFG;
                      #endif /* (USBUART_EP_MANAGEMENT_DMA) */
              
                      /* Restore level (hi, lo, med) for each interrupt source. */
                      USBUART_INTR_LVL_SEL_REG = USBUART_DEFAULT_INTR_LVL_SEL;
                      
                      /* Store SIE interrupt sources. */
                      USBUART_INTR_SIE_MASK_REG = (uint32) USBUART_backup.intrSeiMask;
              
                      /* Set EP0.CR: ACK Setup, NAK IN/OUT. */
                      USBUART_EP0_CR_REG = USBUART_MODE_NAK_IN_OUT;
              
                      /* Restore data EP1-8 configuration. */
                      USBUART_RestoreConfig();
              
                      /* Restore state of USB regulator and wait until it supples stable power. */
                      USBUART_CR1_REG |= USBUART_backup.mode;
                      CyDelayUs(USBUART_WAIT_VREF_STABILITY);
              
                      /* Suspend exit sequence. */
                      USBUART_POWER_CTRL_REG &= (uint32) ~USBUART_POWER_CTRL_SUSPEND;
                      CyDelayUs(USBUART_WAIT_SUSPEND_DEL_DISABLE);
                      USBUART_POWER_CTRL_REG &= (uint32) ~USBUART_POWER_CTRL_SUSPEND_DEL;
              
                  #else
 278   2              /* Set power active and standby mode templates: enable USB block. */
 279   2              USBUART_PM_ACT_CFG_REG  |= USBUART_PM_ACT_EN_FSUSB;
 280   2              USBUART_PM_STBY_CFG_REG |= USBUART_PM_STBY_EN_FSUSB;
 281   2      
 282   2              /* Enable core clock. */
 283   2              USBUART_USB_CLK_EN_REG |= USBUART_USB_CLK_ENABLE;
 284   2      
 285   2              /* Enable the USBIO reference by setting PM.USB_CR0.fsusbio_ref_en.*/
 286   2              USBUART_PM_USB_CR0_REG |= USBUART_PM_USB_CR0_REF_EN;
 287   2      
 288   2              /* The reference is available ~40us after power restored. */
 289   2              CyDelayUs(USBUART_WAIT_VREF_RESTORE);
 290   2              /* Restore state of USB regulator and wait until it supples stable power. */
 291   2              USBUART_CR1_REG |= USBUART_backup.mode;
 292   2              CyDelayUs(USBUART_WAIT_VREF_STABILITY);   /*~50ns delay. */
 293   2      
 294   2              /* Enable USBIO. */
 295   2              USBUART_PM_USB_CR0_REG |= USBUART_PM_USB_CR0_PD_N;
 296   2              CyDelayUs(USBUART_WAIT_PD_PULLUP_N_ENABLE);
 297   2              /* Set the USBIO pull-up enable. */
 298   2              USBUART_PM_USB_CR0_REG |= USBUART_PM_USB_CR0_PD_PULLUP_N;
 299   2      
 300   2              /* Restore arbiter configuration for DMA transfers. */
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 6   

 301   2              #if (USBUART_EP_MANAGEMENT_DMA)
                          #if (USBUART_ARB_ISR_ACTIVE)
                              /* Enable ARB EP interrupt sources. */
                              USBUART_ARB_INT_EN_REG = USBUART_DEFAULT_ARB_INT_EN;
                          #endif /* (USBUART_EP_MANAGEMENT_DMA) */
              
                          /* Configure arbiter for Manual or Auto DMA operation and clear 
                          * configuration completion. 
                          */
                          USBUART_ARB_CFG_REG = USBUART_DEFAULT_ARB_CFG;
                      #endif /* (USBUART_EP_MANAGEMENT_DMA) */
 312   2      
 313   2              /* Set EP0.CR: ACK Setup, STALL IN/OUT. */
 314   2              USBUART_EP0_CR_REG = USBUART_MODE_STALL_IN_OUT;
 315   2      
 316   2              /* Enable the USB IP to respond to USB traffic with the last address. */
 317   2              USBUART_CR0_REG |= USBUART_CR0_ENABLE;
 318   2              CyDelayCycles(USBUART_WAIT_CR0_REG_STABILITY);
 319   2      
 320   2              /* Enable D+ pull-up and keep USB control on IO. */
 321   2              USBUART_USBIO_CR1_REG = USBUART_USBIO_CR1_USBPUEN;
 322   2      
 323   2              /* Restore data EP1-8 configuration. */
 324   2              USBUART_RestoreConfig();
 325   2          #endif /* (CY_PSOC4) */
 326   2          }
 327   1      
 328   1          CyExitCriticalSection(enableInterrupts);
 329   1      }
 330          
 331          
 332          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBUART_DP_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 53
002B 120000      E     LCALL   USBUART_Dp_ClearInterrupt
                                           ; SOURCE LINE # 58
002E D007              POP     AR7
0030 D006              POP     AR6
0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
004A D083              POP     DPH
004C D0F0              POP     B
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USBUART_DP_ISR (END)

             ; FUNCTION USBUART_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 75
0000 22                RET     
             ; FUNCTION USBUART_SaveConfig (END)

             ; FUNCTION USBUART_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
0000 900000      E     MOV     DPTR,#USBUART_configuration
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 8   

0005 EF                MOV     A,R7
0006 6006              JZ      ?C0004
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
0008 120000      E     LCALL   USBUART_ConfigReg
                                           ; SOURCE LINE # 93
000B 120000      E     LCALL   USBUART_EpStateInit
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
000E         ?C0004:
000E 22                RET     
             ; FUNCTION USBUART_RestoreConfig (END)

             ; FUNCTION USBUART_Suspend (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 127
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0008 906008            MOV     DPTR,#06008H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 20E703            JB      ACC.7,$ + 6H
0011 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0014 900000      R     MOV     DPTR,#USBUART_backup
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
001A 906010            MOV     DPTR,#06010H
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 547F              ANL     A,#07FH
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0025 7F00              MOV     R7,#00H
0027 7E00              MOV     R6,#00H
0029 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 156
002C 904394            MOV     DPTR,#04394H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54F9              ANL     A,#0F9H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0037 906008            MOV     DPTR,#06008H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 547F              ANL     A,#07FH
003F FF                MOV     R7,A
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 9   

0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0042 7F00              MOV     R7,#00H
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 164
0049 906009            MOV     DPTR,#06009H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 5401              ANL     A,#01H
0051 FF                MOV     R7,A
0052 900000      R     MOV     DPTR,#USBUART_backup+01H
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0057 906009            MOV     DPTR,#06009H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 54FE              ANL     A,#0FEH
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
0062 7F01              MOV     R7,#01H
0064 7E00              MOV     R6,#00H
0066 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 170
0069 904394            MOV     DPTR,#04394H
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 54FE              ANL     A,#0FEH
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0074 906012            MOV     DPTR,#06012H
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 EF                MOV     A,R7
007A 4420              ORL     A,#020H
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
007F 9043A5            MOV     DPTR,#043A5H
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 54FE              ANL     A,#0FEH
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
008A 9043B5            MOV     DPTR,#043B5H
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 54FE              ANL     A,#0FEH
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 10  

0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0095 7F01              MOV     R7,#01H
0097 7E00              MOV     R6,#00H
0099 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 182
009C 8005              SJMP    ?C0006
009E         ?C0005:
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
009E 900000      R     MOV     DPTR,#USBUART_backup
00A1 E4                CLR     A
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
00A3         ?C0006:
                                           ; SOURCE LINE # 188
00A3 900000      R     MOV     DPTR,#enableInterrupts
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 192
00AB 120000      E     LCALL   USBUART_Dp_ClearInterrupt
                                           ; SOURCE LINE # 193
00AE 9044D9            MOV     DPTR,#044D9H
00B1 7410              MOV     A,#010H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
00B4 9044C1            MOV     DPTR,#044C1H
00B7 7410              MOV     A,#010H
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
00BA 22                RET     
             ; FUNCTION USBUART_Suspend (END)

             ; FUNCTION USBUART_Resume (BEGIN)
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 231
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
0008 900000      R     MOV     DPTR,#USBUART_backup
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 236
0013 9044C9            MOV     DPTR,#044C9H
0016 7410              MOV     A,#010H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
0019 9043A5            MOV     DPTR,#043A5H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 4401              ORL     A,#01H
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 11  

0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
0024 9043B5            MOV     DPTR,#043B5H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4401              ORL     A,#01H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
002F 90609D            MOV     DPTR,#0609DH
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 4401              ORL     A,#01H
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
003A 904394            MOV     DPTR,#04394H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 4401              ORL     A,#01H
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0045 7F28              MOV     R7,#028H
0047 7E00              MOV     R6,#00H
0049 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 291
004C 906009            MOV     DPTR,#06009H
004F C083              PUSH    DPH
0051 C082              PUSH    DPL
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#USBUART_backup+01H
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
005B 4E                ORL     A,R6
005C FF                MOV     R7,A
005D D082              POP     DPL
005F D083              POP     DPH
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
0063 7F00              MOV     R7,#00H
0065 7E00              MOV     R6,#00H
0067 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 295
006A 904394            MOV     DPTR,#04394H
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 4402              ORL     A,#02H
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 12  

0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0075 7F02              MOV     R7,#02H
0077 7E00              MOV     R6,#00H
0079 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 298
007C 904394            MOV     DPTR,#04394H
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 4404              ORL     A,#04H
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
0087 906028            MOV     DPTR,#06028H
008A 7403              MOV     A,#03H
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
008D 906008            MOV     DPTR,#06008H
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 EF                MOV     A,R7
0093 4480              ORL     A,#080H
0095 FF                MOV     R7,A
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0098 7F01              MOV     R7,#01H
009A 7E00              MOV     R6,#00H
009C 7D00              MOV     R5,#00H
009E 7C00              MOV     R4,#00H
00A0 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 321
00A3 906012            MOV     DPTR,#06012H
00A6 7404              MOV     A,#04H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
00A9 120000      R     LCALL   USBUART_RestoreConfig
                                           ; SOURCE LINE # 326
00AC         ?C0008:
                                           ; SOURCE LINE # 328
00AC 900000      R     MOV     DPTR,#enableInterrupts
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 329
00B4 22                RET     
             ; FUNCTION USBUART_Resume (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    465    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.51   USBUART_PM                                                            04/28/2016 18:59:28 PAGE 13  

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
