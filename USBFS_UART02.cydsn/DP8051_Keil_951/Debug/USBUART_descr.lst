C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_DESCR
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBUART_descr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_descr.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(
                    -2) PR(.\DP8051_Keil_951\Debug/USBUART_descr.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\USBUART_descr.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USBUART_descr.c
   3          * \version 3.0
   4          *
   5          * \brief
   6          *  This file contains the USB descriptors and storage.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USBUART_pvt.h"
  17          
  18          
  19          /*****************************************************************************
  20          *  User supplied descriptors.  If you want to specify your own descriptors,
  21          *  define USER_SUPPLIED_DESCRIPTORS below and add your descriptors.
  22          *****************************************************************************/
  23          /* `#START USER_DESCRIPTORS_DECLARATIONS` Place your declaration here */
  24          
  25          /* `#END` */
  26          
  27          
  28          /***************************************
  29          *  USB Customizer Generated Descriptors
  30          ***************************************/
  31          
  32          #if !defined(USER_SUPPLIED_DESCRIPTORS)
  33          /*********************************************************************
  34          * Device Descriptors
  35          *********************************************************************/
  36          const uint8 CYCODE USBUART_DEVICE0_DESCR[18u] = {
  37          /* Descriptor Length                       */ 0x12u,
  38          /* DescriptorType: DEVICE                  */ 0x01u,
  39          /* bcdUSB (ver 2.0)                        */ 0x00u, 0x02u,
  40          /* bDeviceClass                            */ 0x02u,
  41          /* bDeviceSubClass                         */ 0x00u,
  42          /* bDeviceProtocol                         */ 0x00u,
  43          /* bMaxPacketSize0                         */ 0x08u,
  44          /* idVendor                                */ 0xB4u, 0x04u,
  45          /* idProduct                               */ 0x32u, 0xF2u,
  46          /* bcdDevice                               */ 0x01u, 0x00u,
  47          /* iManufacturer                           */ 0x01u,
  48          /* iProduct                                */ 0x04u,
  49          /* iSerialNumber                           */ 0x80u,
  50          /* bNumConfigurations                      */ 0x01u
  51          };
  52          /*********************************************************************
  53          * Config Descriptor  
C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 2   

  54          *********************************************************************/
  55          const uint8 CYCODE USBUART_DEVICE0_CONFIGURATION0_DESCR[67u] = {
  56          /*  Config Descriptor Length               */ 0x09u,
  57          /*  DescriptorType: CONFIG                 */ 0x02u,
  58          /*  wTotalLength                           */ 0x43u, 0x00u,
  59          /*  bNumInterfaces                         */ 0x02u,
  60          /*  bConfigurationValue                    */ 0x01u,
  61          /*  iConfiguration                         */ 0x01u,
  62          /*  bmAttributes                           */ 0x80u,
  63          /*  bMaxPower                              */ 0x32u,
  64          /*********************************************************************
  65          * CDC Interface Descriptor
  66          *********************************************************************/
  67          /*  Interface Descriptor Length            */ 0x09u,
  68          /*  DescriptorType: INTERFACE              */ 0x04u,
  69          /*  bInterfaceNumber                       */ 0x00u,
  70          /*  bAlternateSetting                      */ 0x00u,
  71          /*  bNumEndpoints                          */ 0x01u,
  72          /*  bInterfaceClass                        */ 0x02u,
  73          /*  bInterfaceSubClass                     */ 0x02u,
  74          /*  bInterfaceProtocol                     */ 0x00u,
  75          /*  iInterface                             */ 0x02u,
  76          /*********************************************************************
  77          * Header Descriptor
  78          *********************************************************************/
  79          /*  Header Descriptor Length               */ 0x05u,
  80          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
  81          /*  bDescriptorSubtype                     */ 0x00u,
  82          /*  bcdADC                                 */ 0x10u, 0x01u,
  83          /*********************************************************************
  84          * Abstract Control Management Descriptor
  85          *********************************************************************/
  86          /*  Abstract Control Management Descriptor Length*/ 0x04u,
  87          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
  88          /*  bDescriptorSubtype                     */ 0x02u,
  89          /*  bmCapabilities                         */ 0x02u,
  90          /*********************************************************************
  91          * Union Descriptor
  92          *********************************************************************/
  93          /*  Union Descriptor Length                */ 0x05u,
  94          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
  95          /*  bDescriptorSubtype                     */ 0x06u,
  96          /*  bControlInterface                      */ 0x00u,
  97          /*  bSubordinateInterface                  */ 0x01u,
  98          /*********************************************************************
  99          * Call Management Descriptor
 100          *********************************************************************/
 101          /*  Call Management Descriptor Length      */ 0x05u,
 102          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
 103          /*  bDescriptorSubtype                     */ 0x01u,
 104          /*  bmCapabilities                         */ 0x00u,
 105          /*  bDataInterface                         */ 0x01u,
 106          /*********************************************************************
 107          * Endpoint Descriptor
 108          *********************************************************************/
 109          /*  Endpoint Descriptor Length             */ 0x07u,
 110          /*  DescriptorType: ENDPOINT               */ 0x05u,
 111          /*  bEndpointAddress                       */ 0x81u,
 112          /*  bmAttributes                           */ 0x03u,
 113          /*  wMaxPacketSize                         */ 0x08u, 0x00u,
 114          /*  bInterval                              */ 0x0Au,
 115          /*********************************************************************
C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 3   

 116          * Data Interface Descriptor
 117          *********************************************************************/
 118          /*  Interface Descriptor Length            */ 0x09u,
 119          /*  DescriptorType: INTERFACE              */ 0x04u,
 120          /*  bInterfaceNumber                       */ 0x01u,
 121          /*  bAlternateSetting                      */ 0x00u,
 122          /*  bNumEndpoints                          */ 0x02u,
 123          /*  bInterfaceClass                        */ 0x0Au,
 124          /*  bInterfaceSubClass                     */ 0x00u,
 125          /*  bInterfaceProtocol                     */ 0x00u,
 126          /*  iInterface                             */ 0x03u,
 127          /*********************************************************************
 128          * Endpoint Descriptor
 129          *********************************************************************/
 130          /*  Endpoint Descriptor Length             */ 0x07u,
 131          /*  DescriptorType: ENDPOINT               */ 0x05u,
 132          /*  bEndpointAddress                       */ 0x82u,
 133          /*  bmAttributes                           */ 0x02u,
 134          /*  wMaxPacketSize                         */ 0x40u, 0x00u,
 135          /*  bInterval                              */ 0x00u,
 136          /*********************************************************************
 137          * Endpoint Descriptor
 138          *********************************************************************/
 139          /*  Endpoint Descriptor Length             */ 0x07u,
 140          /*  DescriptorType: ENDPOINT               */ 0x05u,
 141          /*  bEndpointAddress                       */ 0x03u,
 142          /*  bmAttributes                           */ 0x02u,
 143          /*  wMaxPacketSize                         */ 0x40u, 0x00u,
 144          /*  bInterval                              */ 0x00u
 145          };
 146          
 147          /*********************************************************************
 148          * String Descriptor Table
 149          *********************************************************************/
 150          const uint8 CYCODE USBUART_STRING_DESCRIPTORS[159u] = {
 151          /*********************************************************************
 152          * Language ID Descriptor
 153          *********************************************************************/
 154          /* Descriptor Length                       */ 0x04u,
 155          /* DescriptorType: STRING                  */ 0x03u,
 156          /* Language Id                             */ 0x09u, 0x04u,
 157          /*********************************************************************
 158          * String Descriptor: "Cypress Semiconductor"
 159          *********************************************************************/
 160          /* Descriptor Length                       */ 0x2Cu,
 161          /* DescriptorType: STRING                  */ 0x03u,
 162           (uint8)'C', 0u,(uint8)'y', 0u,(uint8)'p', 0u,(uint8)'r', 0u,(uint8)'e', 0u,
 163           (uint8)'s', 0u,(uint8)'s', 0u,(uint8)' ', 0u,(uint8)'S', 0u,(uint8)'e', 0u,
 164           (uint8)'m', 0u,(uint8)'i', 0u,(uint8)'c', 0u,(uint8)'o', 0u,(uint8)'n', 0u,
 165           (uint8)'d', 0u,(uint8)'u', 0u,(uint8)'c', 0u,(uint8)'t', 0u,(uint8)'o', 0u,
 166           (uint8)'r', 0u,
 167          /*********************************************************************
 168          * String Descriptor: "CDC Communication Interface"
 169          *********************************************************************/
 170          /* Descriptor Length                       */ 0x38u,
 171          /* DescriptorType: STRING                  */ 0x03u,
 172           (uint8)'C', 0u,(uint8)'D', 0u,(uint8)'C', 0u,(uint8)' ', 0u,(uint8)'C', 0u,
 173           (uint8)'o', 0u,(uint8)'m', 0u,(uint8)'m', 0u,(uint8)'u', 0u,(uint8)'n', 0u,
 174           (uint8)'i', 0u,(uint8)'c', 0u,(uint8)'a', 0u,(uint8)'t', 0u,(uint8)'i', 0u,
 175           (uint8)'o', 0u,(uint8)'n', 0u,(uint8)' ', 0u,(uint8)'I', 0u,(uint8)'n', 0u,
 176           (uint8)'t', 0u,(uint8)'e', 0u,(uint8)'r', 0u,(uint8)'f', 0u,(uint8)'a', 0u,
 177           (uint8)'c', 0u,(uint8)'e', 0u,
C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 4   

 178          /*********************************************************************
 179          * String Descriptor: "CDC Data Interface"
 180          *********************************************************************/
 181          /* Descriptor Length                       */ 0x26u,
 182          /* DescriptorType: STRING                  */ 0x03u,
 183           (uint8)'C', 0u,(uint8)'D', 0u,(uint8)'C', 0u,(uint8)' ', 0u,(uint8)'D', 0u,
 184           (uint8)'a', 0u,(uint8)'t', 0u,(uint8)'a', 0u,(uint8)' ', 0u,(uint8)'I', 0u,
 185           (uint8)'n', 0u,(uint8)'t', 0u,(uint8)'e', 0u,(uint8)'r', 0u,(uint8)'f', 0u,
 186           (uint8)'a', 0u,(uint8)'c', 0u,(uint8)'e', 0u,
 187          /*********************************************************************
 188          * String Descriptor: "USBUART"
 189          *********************************************************************/
 190          /* Descriptor Length                       */ 0x10u,
 191          /* DescriptorType: STRING                  */ 0x03u,
 192           (uint8)'U', 0u,(uint8)'S', 0u,(uint8)'B', 0u,(uint8)'U', 0u,(uint8)'A', 0u,
 193           (uint8)'R', 0u,(uint8)'T', 0u,
 194          /*********************************************************************/
 195          /* Marks the end of the list.              */ 0x00u};
 196          /*********************************************************************/
 197          
 198          /*********************************************************************
 199          * Serial Number String Descriptor
 200          *********************************************************************/
 201          const uint8 CYCODE USBUART_SN_STRING_DESCRIPTOR[2] = {
 202          /* Descriptor Length                       */ 0x02u,
 203          /* DescriptorType: STRING                  */ 0x03u,
 204          
 205          };
 206          
 207          /*********************************************************************
 208          * HID Report Descriptor: 3-Button Mouse
 209          *********************************************************************/
 210          const uint8 CYCODE USBUART_HIDREPORT_DESCRIPTOR1[54u] = {
 211          /*  Descriptor Size (Not part of descriptor)*/ USBUART_HID_RPT_1_SIZE_LSB,
 212          USBUART_HID_RPT_1_SIZE_MSB,
 213          /* USAGE_PAGE                              */ 0x05u, 0x01u, 
 214          /* USAGE                                   */ 0x09u, 0x02u, 
 215          /* COLLECTION                              */ 0xA1u, 0x01u, 
 216          /* USAGE                                   */ 0x09u, 0x01u, 
 217          /* COLLECTION                              */ 0xA1u, 0x00u, 
 218          /* USAGE_PAGE                              */ 0x05u, 0x09u, 
 219          /* USAGE_MINIMUM                           */ 0x19u, 0x01u, 
 220          /* USAGE_MAXIMUM                           */ 0x29u, 0x03u, 
 221          /* LOGICAL_MINIMUM                         */ 0x15u, 0x00u, 
 222          /* LOGICAL_MAXIMUM                         */ 0x25u, 0x01u, 
 223          /* REPORT_COUNT                            */ 0x95u, 0x03u, 
 224          /* REPORT_SIZE                             */ 0x75u, 0x01u, 
 225          /* INPUT                                   */ 0x81u, 0x02u, 
 226          /* REPORT_COUNT                            */ 0x95u, 0x01u, 
 227          /* REPORT_SIZE                             */ 0x75u, 0x05u, 
 228          /* INPUT                                   */ 0x81u, 0x01u, 
 229          /* USAGE_PAGE                              */ 0x05u, 0x01u, 
 230          /* USAGE                                   */ 0x09u, 0x30u, 
 231          /* USAGE                                   */ 0x09u, 0x31u, 
 232          /* LOGICAL_MINIMUM                         */ 0x15u, 0x81u, 
 233          /* LOGICAL_MAXIMUM                         */ 0x25u, 0x7Fu, 
 234          /* REPORT_SIZE                             */ 0x75u, 0x08u, 
 235          /* REPORT_COUNT                            */ 0x95u, 0x02u, 
 236          /* INPUT                                   */ 0x81u, 0x06u, 
 237          /* END_COLLECTION                          */ 0xC0u, 
 238          /* END_COLLECTION                          */ 0xC0u, 
 239          /*********************************************************************/
C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 5   

 240          /* End of the HID Report Descriptor        */ 0x00u, 0x00u};
 241          /*********************************************************************/
 242          
 243          
 244          /*********************************************************************
 245          * Endpoint Setting Table -- This table contain the endpoint setting
 246          *                           for each endpoint in the configuration. It
 247          *                           contains the necessary information to
 248          *                           configure the endpoint hardware for each
 249          *                           interface and alternate setting.
 250          *********************************************************************/
 251          const T_USBUART_EP_SETTINGS_BLOCK CYCODE USBUART_DEVICE0_CONFIGURATION0_EP_SETTINGS_TABLE[3u] = {
 252          /* IFC  ALT    EPAddr bmAttr MaxPktSize Class ********************/
 253          {0x00u, 0x00u, 0x81u, 0x03u, 0x0008u,   0x02u},
 254          {0x01u, 0x00u, 0x82u, 0x02u, 0x0040u,   0x0Au},
 255          {0x01u, 0x00u, 0x03u, 0x02u, 0x0040u,   0x0Au}
 256          };
 257          const uint8 CYCODE USBUART_DEVICE0_CONFIGURATION0_INTERFACE_CLASS[2u] = {
 258          0x02u, 0x0Au
 259          };
 260          /*********************************************************************
 261          * Config Dispatch Table -- Points to the Config Descriptor and each of
 262          *                          and endpoint setup table and to each
 263          *                          interface table if it specifies a USB Class
 264          *********************************************************************/
 265          const T_USBUART_LUT CYCODE USBUART_DEVICE0_CONFIGURATION0_TABLE[5u] = {
 266              {0x01u,     &USBUART_DEVICE0_CONFIGURATION0_DESCR},
 267              {0x03u,     &USBUART_DEVICE0_CONFIGURATION0_EP_SETTINGS_TABLE},
 268              {0x00u,    NULL},
 269              {0x00u,    NULL},
 270              {0x00u,     &USBUART_DEVICE0_CONFIGURATION0_INTERFACE_CLASS}
 271          };
 272          /*********************************************************************
 273          * Device Dispatch Table -- Points to the Device Descriptor and each of
 274          *                          and Configuration Tables for this Device 
 275          *********************************************************************/
 276          const T_USBUART_LUT CYCODE USBUART_DEVICE0_TABLE[3u] = {
 277              {0x01u,     &USBUART_DEVICE0_DESCR},
 278              {0x00u,    NULL},
 279              {0x01u,     &USBUART_DEVICE0_CONFIGURATION0_TABLE}
 280          };
 281          /*********************************************************************
 282          * Device Table -- Indexed by the device number.
 283          *********************************************************************/
 284          const T_USBUART_LUT CYCODE USBUART_TABLE[1u] = {
 285              {0x01u,     &USBUART_DEVICE0_TABLE}
 286          };
 287          
 288          #endif /* USER_SUPPLIED_DESCRIPTORS */
 289          
 290          #if defined(USBUART_ENABLE_MSOS_STRING)
 291          
 292              /******************************************************************************
 293              *  USB Microsoft OS String Descriptor
 294              *  "MSFT" identifies a Microsoft host
 295              *  "100" specifies version 1.00
 296              *  USBUART_GET_EXTENDED_CONFIG_DESCRIPTOR becomes the bRequest value
 297              *  in a host vendor device/class request
 298              ******************************************************************************/
 299          
 300              const uint8 CYCODE USBUART_MSOS_DESCRIPTOR[USBUART_MSOS_DESCRIPTOR_LENGTH] = {
 301              /* Descriptor Length                       */   0x12u,
C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 6   

 302              /* DescriptorType: STRING                  */   0x03u,
 303              /* qwSignature - "MSFT100"                 */   (uint8)'M', 0u, (uint8)'S', 0u, (uint8)'F', 0u, (uint8
             -)'T', 0u,
 304                                                              (uint8)'1', 0u, (uint8)'0', 0u, (uint8)'0', 0u,
 305              /* bMS_VendorCode:                         */   USBUART_GET_EXTENDED_CONFIG_DESCRIPTOR,
 306              /* bPad                                    */   0x00u
 307              };
 308          
 309              /* Extended Configuration Descriptor */
 310          
 311              const uint8 CYCODE USBUART_MSOS_CONFIGURATION_DESCR[USBUART_MSOS_CONF_DESCR_LENGTH] = {
 312              /*  Length of the descriptor 4 bytes       */   0x28u, 0x00u, 0x00u, 0x00u,
 313              /*  Version of the descriptor 2 bytes      */   0x00u, 0x01u,
 314              /*  wIndex - Fixed:INDEX_CONFIG_DESCRIPTOR */   0x04u, 0x00u,
 315              /*  bCount - Count of device functions.    */   0x01u,
 316              /*  Reserved : 7 bytes                     */   0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
 317              /*  bFirstInterfaceNumber                  */   0x00u,
 318              /*  Reserved                               */   0x01u,
 319              /*  compatibleID    - "CYUSB\0\0"          */   (uint8)'C', (uint8)'Y', (uint8)'U', (uint8)'S', (uint8
             -)'B',
 320                                                              0x00u, 0x00u, 0x00u,
 321              /*  subcompatibleID - "00001\0\0"          */   (uint8)'0', (uint8)'0', (uint8)'0', (uint8)'0', (uint8
             -)'1',
 322                                                              0x00u, 0x00u, 0x00u,
 323              /*  Reserved : 6 bytes                     */   0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
 324              };
 325          
 326          #endif /* USBUART_ENABLE_MSOS_STRING */
 327          
 328          /* DIE ID string descriptor for 8 bytes ID */
 329          #if defined(USBUART_ENABLE_IDSN_STRING)
 330              uint8 USBUART_idSerialNumberStringDescriptor[USBUART_IDSN_DESCR_LENGTH];
 331          #endif /* USBUART_ENABLE_IDSN_STRING */
 332          
 333          
 334          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_DESCR                                                         04/28/2016 18:59:26 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    417    ----
   XDATA SIZE       =     34    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
