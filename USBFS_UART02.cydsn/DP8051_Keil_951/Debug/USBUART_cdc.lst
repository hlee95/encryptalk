C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_CDC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBUART_cdc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_cdc.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2)
                    - PR(.\DP8051_Keil_951\Debug/USBUART_cdc.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\USBUART_cdc.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USBUART_cdc.c
   3          * \version 3.0
   4          *
   5          * \brief
   6          *  This file contains the USB CDC class request handler.
   7          *
   8          * Related Document:
   9          *  Universal Serial Bus Class Definitions for Communication Devices Version 1.1
  10          *
  11          ********************************************************************************
  12          * \copyright
  13          * Copyright 2012-2015, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "USBUART_cdc.h"
  20          #include "USBUART_pvt.h"
  21          #include "cyapicallbacks.h"
  22          
  23          #if defined(USBUART_ENABLE_CDC_CLASS)
  24          
  25          /*******************************************************************************
  26          *    CDC Variables
  27          *******************************************************************************/
  28          
  29          /*PUBLIC*/
  30          /** Contains the current line coding structure. The host sets it using a
  31           * SET_LINE_CODING request and returns it to the user code using the
  32           * USBUART_GetDTERate(), USBUART_GetCharFormat(),
  33           * USBUART_GetParityType(), and USBUART_GetDataBits() APIs.
  34           * It is an array of 2 elements for COM port 1 and COM port 2 for MultiCOM port
  35           * support. In case of 1 COM port, data is in 0 element.*/
  36          volatile uint8 USBUART_linesCoding[USBUART_MAX_MULTI_COM_NUM][USBUART_LINE_CODING_SIZE] =
  37          {
  38              /*COM Port 1*/
  39              {
  40              0x00u, 0xC2u, 0x01u, 0x00u,     /* Data terminal rate 115200 */
  41              0x00u,                          /* 1 Stop bit */
  42              0x00u,                          /* None parity */
  43              0x08u                           /* 8 data bits */
  44              },
  45              /*COM Port 2*/
  46              {
  47              0x00u, 0xC2u, 0x01u, 0x00u,     /* Data terminal rate 115200 */
  48              0x00u,                          /* 1 Stop bit */
  49              0x00u,                          /* None parity */
  50              0x08u                           /* 8 data bits */
  51              }
  52          };
  53          
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 2   

  54          /**Used as a flag for the USBUART_IsLineChanged() API, to inform it that the
  55           * host has been sent a request to change line coding or control bitmap. It is 
  56           * an array of 2 elements for COM port 1 and COM port 2 for MultiCOM port 
  57           * support. In case of 1 COM port, data is in 0 element.*/
  58          volatile uint8  USBUART_linesChanged[USBUART_MAX_MULTI_COM_NUM];
  59          /** Contains the current control-signal bitmap. The host sets it using a
  60           * SET_CONTROL_LINE request and returns it to the user code using the 
  61           * USBUART_GetLineControl() API. It is an array of 2 elements for COM 
  62           * port 1 and COM port 2 for MultiCOM port support. In case of 1 COM port, data 
  63           * is in 0 element.*/
  64          volatile uint16 USBUART_linesControlBitmap[USBUART_MAX_MULTI_COM_NUM];
  65          /** Contains the 16-bit serial state value that was sent using the 
  66           * \ref USBUART_SendSerialState() API. . It is an array of 2 elements 
  67           * for COM port 1 and COM port 2 for MultiCOM port support. In case of 1 COM 
  68           * port, data is in 0 element.*/
  69          volatile uint16 USBUART_serialStateBitmap[USBUART_MAX_MULTI_COM_NUM];
  70          /** Contains the data IN endpoint number. It is initialized after a 
  71           * SET_CONFIGURATION request based on a user descriptor. It is used in CDC APIs 
  72           * to send data to the PC. It is an array of 2 elements for COM port 1 and COM 
  73           * port 2 for MultiCOM port support. In case of 1 COM port, data is in 0 element.*/
  74          volatile uint8  USBUART_cdcDataInEp[USBUART_MAX_MULTI_COM_NUM];
  75          /** Contains the data OUT endpoint number. It is initialized after a 
  76           * SET_CONFIGURATION request based on user descriptor. It is used in CDC APIs to 
  77           * receive data from the PC. It is an array of 2 elements for COM port 1 and COM  
  78           * port 2 for MultiCOM port support. In case of 1 COM port, data is in 0 element.*/
  79          volatile uint8  USBUART_cdcDataOutEp[USBUART_MAX_MULTI_COM_NUM];
  80          /** Contains the data IN endpoint number for COMMUNICATION interface. It is 
  81           * initialized after a SET_CONFIGURATION request based on a user descriptor. It 
  82           * is used in CDC APIs to send data to the PC. It is an array of 2 elements for 
  83           * COM port 1 and COM port 2 for MultiCOM port support. In case of 1 COM port, 
  84           * data is in 0 element.*/
  85          volatile uint8  USBUART_cdcCommInInterruptEp[USBUART_MAX_MULTI_COM_NUM];
  86          
  87          /*PRIVATE*/
  88          
  89          #define USBUART_CDC_IN_EP      (0u)
  90          #define USBUART_CDC_OUT_EP     (1u)
  91          #define USBUART_CDC_NOTE_EP    (2u)
  92          
  93          #define USBUART_CDC_EP_MASK    (0x01u)
  94          
  95          #define USBUART_GET_EP_COM_NUM(cdcComNums, epType) (((cdcComNums) >> (epType)) & USBUART_CDC_EP_MASK)
  96          
  97          
  98          /***************************************
  99          *     Static Function Prototypes
 100          ***************************************/
 101          #if (USBUART_ENABLE_CDC_CLASS_API != 0u)
 102              static uint16 USBUART_StrLen(const char8 string[]) ;
 103              static t_USBUART_cdc_notification USBUART_serialStateNotification =
 104              {
 105          
 106                  USBUART_SERIAL_STATE_REQUEST_TYPE, /* bRequestType    */
 107                  USBUART_SERIAL_STATE,              /* bNotification   */
 108                  0u,                                         /* wValue          */
 109                  0u,                                         /* wValueMSB       */
 110                  0u,                                         /* wIndex          */
 111                  0u,                                         /* wIndexMSB       */
 112                  USBUART_SERIAL_STATE_LENGTH,       /* wLength         */
 113                  0u,                                         /* wLengthMSB      */
 114                  0u,                                         /* wSerialState    */
 115                  0u,                                         /* wSerialStateMSB */
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 3   

 116              };
 117              static uint8 USBUART_activeCom = 0u;
 118          #endif /* (USBUART_ENABLE_CDC_CLASS_API != 0u) */
 119          
 120          
 121          /***************************************
 122          * Custom Declarations
 123          ***************************************/
 124          
 125          /* `#START CDC_CUSTOM_DECLARATIONS` Place your declaration here */
 126          
 127          /* `#END` */
 128          
 129          
 130          /*******************************************************************************
 131          * Function Name: USBUART_DispatchCDCClassRqst
 132          ****************************************************************************//**
 133          *
 134          *  This routine dispatches CDC class requests.
 135          *
 136          * \return
 137          *  requestHandled
 138          *
 139          * \globalvars
 140          *   USBUART_linesCoding: Contains the current line coding structure.
 141          *     It is set by the Host using SET_LINE_CODING request and returned to the
 142          *     user code by the USBFS_GetDTERate(), USBFS_GetCharFormat(),
 143          *     USBFS_GetParityType(), USBFS_GetDataBits() APIs.
 144          *   USBUART_linesControlBitmap: Contains the current control signal
 145          *     bitmap. It is set by the Host using SET_CONTROL_LINE request and returned
 146          *     to the user code by the USBFS_GetLineControl() API.
 147          *   USBUART_linesChanged: This variable is used as a flag for the
 148          *     USBFS_IsLineChanged() API, to be aware that Host has been sent request
 149          *     for changing Line Coding or Control Bitmap.
 150          *
 151          * \reentrant
 152          *  No.
 153          *
 154          *******************************************************************************/
 155          uint8 USBUART_DispatchCDCClassRqst(void) 
 156          {
 157   1          uint8 requestHandled = USBUART_FALSE;
 158   1          uint8 comPort;
 159   1      
 160   1          comPort = USBUART_GetInterfaceComPort((uint8)USBUART_wIndexLoReg);
 161   1      
 162   1          /* Check request direction: D2H or H2D. */
 163   1          if (0u != (USBUART_bmRequestTypeReg & USBUART_RQST_DIR_D2H))
 164   1          {
 165   2              /* Handle direction from device to host. */
 166   2      
 167   2              switch (USBUART_bRequestReg)
 168   2              {
 169   3                  case USBUART_CDC_GET_LINE_CODING:
 170   3                      USBUART_currentTD.count = USBUART_LINE_CODING_SIZE;
 171   3                      USBUART_currentTD.pData = USBUART_linesCoding[comPort];
 172   3                      requestHandled  = USBUART_InitControlRead();
 173   3                      break;
 174   3      
 175   3                  /* `#START CDC_READ_REQUESTS` Place other request handler here */
 176   3      
 177   3                  /* `#END` */
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 4   

 178   3      
 179   3                  default:
 180   3                  /* Do not handle this request unless callback is defined. */
 181   3                  #ifdef USBUART_DISPATCH_CDC_CLASS_CDC_READ_REQUESTS_CALLBACK
                              requestHandled = USBUART_DispatchCDCClass_CDC_READ_REQUESTS_Callback();
                          #endif /* (USBUART_DISPATCH_CDC_CLASS_CDC_READ_REQUESTS_CALLBACK) */
 184   3                      break;
 185   3              }
 186   2          }
 187   1          else
 188   1          {
 189   2              /* Handle direction from host to device. */
 190   2      
 191   2              switch (USBUART_bRequestReg)
 192   2              {
 193   3                  case USBUART_CDC_SET_LINE_CODING:
 194   3                      USBUART_currentTD.count  = USBUART_LINE_CODING_SIZE;
 195   3                      USBUART_currentTD.pData  = USBUART_linesCoding[comPort];
 196   3                      USBUART_linesChanged[comPort] |= USBUART_LINE_CODING_CHANGED;
 197   3      
 198   3                      requestHandled = USBUART_InitControlWrite();
 199   3                      break;
 200   3      
 201   3                  case USBUART_CDC_SET_CONTROL_LINE_STATE:
 202   3                      USBUART_linesControlBitmap[comPort] = (uint8) USBUART_wValueLoReg;
 203   3                      USBUART_linesChanged[comPort]      |= USBUART_LINE_CONTROL_CHANGED;
 204   3      
 205   3                      requestHandled = USBUART_InitNoDataControlTransfer();
 206   3                      break;
 207   3      
 208   3                  /* `#START CDC_WRITE_REQUESTS` Place other request handler here */
 209   3      
 210   3                  /* `#END` */
 211   3      
 212   3                  default:
 213   3                      /* Do not handle this request unless callback is defined. */
 214   3                  #ifdef USBUART_DISPATCH_CDC_CLASS_CDC_WRITE_REQUESTS_CALLBACK
                              requestHandled = USBUART_DispatchCDCClass_CDC_WRITE_REQUESTS_Callback();
                          #endif /* (USBUART_DISPATCH_CDC_CLASS_CDC_WRITE_REQUESTS_CALLBACK) */
 217   3                      break;
 218   3              }
 219   2          }
 220   1      
 221   1          return(requestHandled);
 222   1      }
 223          
 224          
 225          /***************************************************************************
 226          * Function Name: USBUART_GetInterfaceComPort
 227          ************************************************************************//**
 228          *   \internal
 229          *  Internal function which gets number of COM port by specified interface
 230          *   number.
 231          *
 232          * \param uint8 interface
 233          *  Interface number
 234          *
 235          * \return
 236          *  COM port number (0 or 1) or error 0xFF
 237          *
 238          ***************************************************************************/
 239          uint8 USBUART_GetInterfaceComPort(uint8 interface) 
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 5   

 240          {
 241   1          uint8 comPort = 0u;
 242   1          uint8 res = 0xFFu;
 243   1          uint8 notEp;
 244   1      
 245   1          while (comPort < USBUART_MAX_MULTI_COM_NUM)
 246   1          {
 247   2              notEp = USBUART_cdcCommInInterruptEp[comPort];
 248   2      
 249   2              if (USBUART_EP[notEp].interface == interface)
 250   2              {
 251   3                  res = comPort;
 252   3                  comPort = USBUART_MAX_MULTI_COM_NUM;
 253   3              }
 254   2      
 255   2              comPort++;
 256   2          }
 257   1          return (res);
 258   1      }
 259          
 260          
 261          /***************************************
 262          * Optional CDC APIs
 263          ***************************************/
 264          #if (USBUART_ENABLE_CDC_CLASS_API != 0u)
 265          /***************************************************************************
 266          * Function Name: USBUART_CDC_Init
 267          ************************************************************************//**
 268          *
 269          *  This function initializes the CDC interface to be ready to receive data
 270          *  from the PC. The API set active communication port to 0 in the case of 
 271          *  multiple communication port support.This API should be called after the 
 272          *  device has been started and configured using USBUART_Start() API to 
 273          *  initialize and start the USBFS component operation. Then call the 
 274          *  USBUART_GetConfiguration() API to wait until the host has enumerated and 
 275          *  configured the device. For example:
 276          *
 277          *  \snippet /USBFS_sut_02.cydsn/main.c wait for enumeration
 278          *
 279          * \return
 280          *  cystatus:
 281          *   Return Value    Description
 282          *   USBUART_SUCCESS   CDC interface was initialized correctly
 283          *   USBUART_FAILURE   CDC interface was not initialized
 284          *
 285          * \globalvars
 286          *   USBUART_linesChanged: Initialized to zero.
 287          *   USBUART_cdcDataOutEp: Used as an OUT endpoint number.
 288          *
 289          * \reentrant
 290          *  No.
 291          *
 292          *******************************************************************************/
 293          uint8 USBUART_CDC_Init(void) 
 294          {
 295   1          uint8 comPort;
 296   1          uint8 outEp;
 297   1          uint8 ret = USBUART_SUCCESS;
 298   1      
 299   1          USBUART_activeCom = 0u;
 300   1          USBUART_linesChanged[USBUART_COM_PORT1] = 0u;
 301   1          USBUART_linesChanged[USBUART_COM_PORT2] = 0u;
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 6   

 302   1      
 303   1          for(comPort = 0u; comPort<USBUART_MAX_MULTI_COM_NUM; comPort++)
 304   1          {
 305   2              outEp = USBUART_cdcDataOutEp[comPort];
 306   2              if((0u != outEp) && (USBUART_MAX_EP > outEp))
 307   2              {
 308   3                  USBUART_EnableOutEP(outEp);
 309   3              }
 310   2      
 311   2          }
 312   1      
 313   1          /* COM Port 1 should be correct to proceed. */
 314   1          if ((0u == USBUART_cdcDataInEp[USBUART_COM_PORT1]) \
 315   1                  || (0u == USBUART_cdcDataOutEp[USBUART_COM_PORT1]) \
 316   1                  || (0u ==  USBUART_cdcCommInInterruptEp[USBUART_COM_PORT1])
 317   1                  || (USBUART_cdcDataInEp[USBUART_COM_PORT1] >= USBUART_MAX_EP)
 318   1                  || (USBUART_cdcDataOutEp[USBUART_COM_PORT1] >= USBUART_MAX_EP)
 319   1                  || (USBUART_cdcCommInInterruptEp[USBUART_COM_PORT1] >= USBUART_MAX_EP))
 320   1          {
 321   2              ret = USBUART_FAILURE;
 322   2          }
 323   1      
 324   1          return (ret);
 325   1      }
 326          
 327          
 328          /*******************************************************************************
 329          * Function Name: USBUART_PutData
 330          ****************************************************************************//**
 331          *
 332          *  This function sends a specified number of bytes from the location specified
 333          *  by a pointer to the PC. The USBUART_CDCIsReady() function should be
 334          *  called before sending new data, to be sure that the previous data has
 335          *  finished sending.
 336          *  If the last sent packet is less than maximum packet size the USB transfer
 337          *  of this short packet will identify the end of the segment. If the last sent
 338          *  packet is exactly maximum packet size, it shall be followed by a zero-length
 339          *  packet (which is a short packet) to assure the end of segment is properly
 340          *  identified. To send zero-length packet, use USBUART_PutData() API
 341          *  with length parameter set to zero.
 342          *
 343          *  \param pData: pointer to the buffer containing data to be sent.
 344          *  \param length: Specifies the number of bytes to send from the pData
 345          *  buffer. Maximum length will be limited by the maximum packet
 346          *  size for the endpoint. Data will be lost if length is greater than Max
 347          *  Packet Size.
 348          *
 349          * \globalvars
 350          *
 351          *   USBUART_cdcDataInEp: CDC IN endpoint number used for sending
 352          *     data.
 353          *
 354          * \reentrant
 355          *  No.
 356          *
 357          *******************************************************************************/
 358          void USBUART_PutData(const uint8* pData, uint16 length) 
 359          {
 360   1          uint8 epNumber = USBUART_cdcDataInEp[USBUART_activeCom];
 361   1      
 362   1          /* Limit length to maximum packet size for endpoint. */
 363   1          if (length > USBUART_EP[epNumber].bufferSize)
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 7   

 364   1          {
 365   2              /* Caution: Data will be lost if length is greater than Max Packet Size. */
 366   2              length = USBUART_EP[epNumber].bufferSize;
 367   2      
 368   2              /* Halt CPU in debug mode */
 369   2              CYASSERT(0u != 0u);
 370   2          }
 371   1      
 372   1          USBUART_LoadInEP(epNumber, pData, length);
 373   1      }
 374          
 375          
 376          /*******************************************************************************
 377          * Function Name: USBUART_StrLen
 378          ****************************************************************************//**
 379          *
 380          *  Calculates length of a null terminated string.
 381          *
 382          *  \param string: pointer to the string.
 383          *
 384          * \return
 385          *  Length of the string
 386          *
 387          *******************************************************************************/
 388          static uint16 USBUART_StrLen(const char8 string[]) 
 389          {
 390   1          uint16 len = 0u;
 391   1      
 392   1          while (string[len] != (char8)0)
 393   1          {
 394   2              len++;
 395   2          }
 396   1      
 397   1          return ((uint16) len);
 398   1      }
 399          
 400          
 401          /***************************************************************************
 402          * Function Name: USBUART_PutString
 403          ************************************************************************//**
 404          *
 405          *  This function sends a null terminated string to the PC. This function will
 406          *  block if there is not enough memory to place the whole string. It will block
 407          *  until the entire string has been written to the transmit buffer.
 408          *  The USBUART_CDCIsReady() function should be called before
 409          *  sending data with a new call to USBUART_PutString(), to be sure
 410          *  that the previous data has finished sending. This function sends
 411          *  zero-length packet automatically, if the length of the last packet, sent
 412          *  by this API, is equal to Max Packet Size
 413          *
 414          *  \param string: pointer to the string to be sent to the PC.
 415          *
 416          * \globalvars
 417          *
 418          *   USBUART_cdcDataInEp: CDC IN endpoint number used for sending
 419          *     data.
 420          *
 421          * \reentrant
 422          *  No.
 423          *
 424          ***************************************************************************/
 425          void USBUART_PutString(const char8 string[]) 
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 8   

 426          {
 427   1          uint16 strLength;
 428   1          uint16 sendLength;
 429   1          uint16 bufIndex = 0u;
 430   1      
 431   1          uint8  epNumber = USBUART_cdcDataInEp[USBUART_activeCom];
 432   1      
 433   1          /* Get length string length (it is terminated with zero). */
 434   1          strLength = USBUART_StrLen(string);
 435   1      
 436   1          do
 437   1          {
 438   2              /* Limit length to maximum packet size of endpoint. */
 439   2              sendLength = (strLength > USBUART_EP[epNumber].bufferSize) ?
 440   2                                        USBUART_EP[epNumber].bufferSize : strLength;
 441   2      
 442   2              /* Load IN endpoint and expose it to host. */
 443   2              USBUART_LoadInEP(epNumber, (const uint8 *)&string[bufIndex], sendLength);
 444   2              strLength -= sendLength;
 445   2      
 446   2              /* If more data are present to send or full packet was sent */
 447   2              if ((strLength > 0u) || (sendLength == USBUART_EP[epNumber].bufferSize))
 448   2              {
 449   3                  bufIndex += sendLength;
 450   3      
 451   3                  /* Wait until host read data from IN endpoint buffer. */
 452   3                  while (USBUART_IN_BUFFER_FULL == USBUART_EP[epNumber].apiEpState)
 453   3                  {
 454   4                  }
 455   3      
 456   3                  /* If last packet is exactly maximum packet size, it shall be followed
 457   3                  * by a zero-length packet to assure the end of segment is properly
 458   3                  * identified by the terminal.
 459   3                  */
 460   3                  if (0u == strLength)
 461   3                  {
 462   4                      USBUART_LoadInEP(epNumber, NULL, 0u);
 463   4                  }
 464   3              }
 465   2          }
 466   1          while (strLength > 0u);
 467   1      }
 468          
 469          
 470          /***************************************************************************
 471          * Function Name: USBUART_PutChar
 472          ************************************************************************//**
 473          *
 474          *  This function writes a single character to the PC at a time. This is an
 475          *  inefficient way to send large amounts of data.
 476          *
 477          *  \param txDataByte: Character to be sent to the PC.
 478          *
 479          *  \globalvars
 480          *
 481          *   USBUART_cdcDataInEp: CDC IN endpoint number used for sending
 482          *     data.
 483          *
 484          *  \reentrant
 485          *  No.
 486          *
 487          ***************************************************************************/
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 9   

 488          void USBUART_PutChar(char8 txDataByte) 
 489          {
 490   1          uint8 dataByte;
 491   1          dataByte = (uint8) txDataByte;
 492   1      
 493   1          USBUART_LoadInEP(USBUART_cdcDataInEp[USBUART_activeCom], &dataByte, 1u);
 494   1      }
 495          
 496          
 497          /*******************************************************************************
 498          * Function Name: USBUART_PutCRLF
 499          ****************************************************************************//**
 500          *
 501          *  This function sends a carriage return (0x0D) and line feed (0x0A) to the
 502          *  PC. This APIis provided to mimic API provided by our other UART components
 503          *
 504          * \globalvars
 505          *
 506          *   USBUART_cdcDataInEp: CDC IN endpoint number used for sending
 507          *     data.
 508          *
 509          * \reentrant
 510          *  No.
 511          *
 512          *******************************************************************************/
 513          void USBUART_PutCRLF(void) 
 514          {
 515   1          const uint8 CYCODE txData[] = {0x0Du, 0x0Au};
 516   1      
 517   1          USBUART_LoadInEP(USBUART_cdcDataInEp[USBUART_activeCom], (const uint8 *)txData, 2u);
 518   1      }
 519          
 520          
 521          /*******************************************************************************
 522          * Function Name: USBUART_GetCount
 523          ****************************************************************************//**
 524          *
 525          *  This function returns the number of bytes that were received from the PC.
 526          *  The returned length value should be passed to USBUART_GetData() as
 527          *  a parameter to read all received data. If all of the received data is not
 528          *  read at one time by the USBUART_GetData() API, the unread data will
 529          *  be lost.
 530          *
 531          * \return
 532          *  Returns the number of received bytes. The maximum amount of received data at
 533          *  a time is limited by the maximum packet size for the endpoint.
 534          *
 535          * \globalvars
 536          *   USBUART_cdcDataOutEp: CDC OUT endpoint number used.
 537          *
 538          *******************************************************************************/
 539          uint16 USBUART_GetCount(void) 
 540          {
 541   1          uint16 bytesCount;
 542   1      
 543   1          uint8  epNumber = USBUART_cdcDataOutEp[USBUART_activeCom];
 544   1      
 545   1          if (USBUART_OUT_BUFFER_FULL == USBUART_EP[epNumber].apiEpState)
 546   1          {
 547   2              bytesCount = USBUART_GetEPCount(epNumber);
 548   2          }
 549   1          else
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 10  

 550   1          {
 551   2              bytesCount = 0u;
 552   2          }
 553   1      
 554   1          return (bytesCount);
 555   1      }
 556          
 557          
 558          /*******************************************************************************
 559          * Function Name: USBUART_DataIsReady
 560          ****************************************************************************//**
 561          *
 562          *  This function returns a non-zero value if the component received data or
 563          *  received zero-length packet. The USBUART_GetAll() or
 564          *  USBUART_GetData() API should be called to read data from the buffer
 565          *  and reinitialize the OUT endpoint even when a zero-length packet is
 566          *  received. These APIs will return zero value when zero-length packet is
 567          *  received.
 568          *
 569          * \return
 570          *  If the OUT packet is received, this function returns a non-zero value.
 571          *  Otherwise, it returns zero.
 572          *
 573          * \globalvars
 574          *   USBUART_cdcDataOutEp: CDC OUT endpoint number used.
 575          *
 576          *******************************************************************************/
 577          uint8 USBUART_DataIsReady(void) 
 578          {
 579   1          return (USBUART_GetEPState(USBUART_cdcDataOutEp[USBUART_activeCom]));
 580   1      }
 581          
 582          
 583          /*******************************************************************************
 584          * Function Name: USBUART_CDCIsReady
 585          ****************************************************************************//**
 586          *
 587          *  This function returns a non-zero value if the component is ready to send more
 588          *  data to the PC; otherwise, it returns zero. The function should be called
 589          *  before sending new data when using any of the following APIs:
 590          *  USBUART_PutData(),USBUART_PutString(),
 591          *  USBUART_PutChar or USBUART_PutCRLF(),
 592          *  to be sure that the previous data has finished sending.
 593          *
 594          * \return
 595          *  If the buffer can accept new data, this function returns a non-zero value.
 596          *  Otherwise, it returns zero.
 597          *
 598          * \globalvars
 599          *   USBUART_cdcDataInEp: CDC IN endpoint number used.
 600          *
 601          *******************************************************************************/
 602          uint8 USBUART_CDCIsReady(void) 
 603          {
 604   1          return (USBUART_GetEPState(USBUART_cdcDataInEp[USBUART_activeCom]));
 605   1      }
 606          
 607          
 608          /***************************************************************************
 609          * Function Name: USBUART_GetData
 610          ************************************************************************//**
 611          *
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 11  

 612          *  This function gets a specified number of bytes from the input buffer and
 613          *  places them in a data array specified by the passed pointer.
 614          *  The USBUART_DataIsReady() API should be called first, to be sure
 615          *  that data is received from the host. If all received data will not be read at
 616          *  once, the unread data will be lost. The USBUART_GetData() API should
 617          *  be called to get the number of bytes that were received.
 618          *
 619          *  \param pData: Pointer to the data array where data will be placed.
 620          *  \param Length: Number of bytes to read into the data array from the RX buffer.
 621          *          Maximum length is limited by the the number of received bytes
 622          *          or 64 bytes.
 623          *
 624          * \return
 625          *         Number of bytes which function moves from endpoint RAM into the
 626          *         data array. The function moves fewer than the requested number
 627          *         of bytes if the host sends fewer bytes than requested or sends
 628          *         zero-length packet.
 629          *
 630          * \globalvars
 631          *   USBUART_cdcDataOutEp: CDC OUT endpoint number used.
 632          *
 633          * \reentrant
 634          *  No.
 635          *
 636          ***************************************************************************/
 637          uint16 USBUART_GetData(uint8* pData, uint16 length) 
 638          {
 639   1          uint8 epNumber = USBUART_cdcDataOutEp[USBUART_activeCom];
 640   1      
 641   1          /* Read data from OUT endpoint buffer. */
 642   1          length = USBUART_ReadOutEP(epNumber, pData, length);
 643   1      
 644   1      #if (USBUART_EP_MANAGEMENT_DMA_MANUAL)
                  /* Wait until DMA complete transferring data from OUT endpoint buffer. */
                  while (USBUART_OUT_BUFFER_FULL == USBUART_GetEPState(epNumber))
                  {
                  }
              
                  /* Enable OUT endpoint to communicate with host. */
                  USBUART_EnableOutEP(epNumber);
              #endif /* (USBUART_EP_MANAGEMENT_DMA_MANUAL) */
 653   1      
 654   1          return (length);
 655   1      }
 656          
 657          
 658          /*******************************************************************************
 659          * Function Name: USBUART_GetAll
 660          ****************************************************************************//**
 661          *
 662          *  This function gets all bytes of received data from the input buffer and
 663          *  places them into a specified data array. The
 664          *  USBUART_DataIsReady() API should be called first, to be sure
 665          *  that data is received from the host.
 666          *
 667          *  \param pData: Pointer to the data array where data will be placed.
 668          *
 669          * \return
 670          *  Number of bytes received. The maximum amount of the received at a time
 671          *  data is 64 bytes.
 672          *
 673          * \globalvars
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 12  

 674          *   - \ref USBUART_cdcDataOutEp: CDC OUT endpoint number used.
 675          *   - \ref USBUART_EP[].bufferSize: EP max packet size is used as a
 676          *     length to read all data from the EP buffer.
 677          *
 678          * \reentrant
 679          *  No.
 680          *
 681          *******************************************************************************/
 682          uint16 USBUART_GetAll(uint8* pData) 
 683          {
 684   1          uint8 epNumber = USBUART_cdcDataOutEp[USBUART_activeCom];
 685   1          uint16 dataLength;
 686   1      
 687   1          /* Read data from OUT endpoint buffer. */
 688   1          dataLength = USBUART_ReadOutEP(epNumber, pData, USBUART_EP[epNumber].bufferSize);
 689   1      
 690   1      #if (USBUART_EP_MANAGEMENT_DMA_MANUAL)
                  /* Wait until DMA complete transferring data from OUT endpoint buffer. */
                  while (USBUART_OUT_BUFFER_FULL == USBUART_GetEPState(epNumber))
                  {
                  }
              
                  /* Enable OUT endpoint to communicate with host. */
                  USBUART_EnableOutEP(epNumber);
              #endif /* (USBUART_EP_MANAGEMENT_DMA_MANUAL) */
 699   1      
 700   1          return (dataLength);
 701   1      }
 702          
 703          
 704          /***************************************************************************
 705          * Function Name: USBUART_GetChar
 706          ************************************************************************//**
 707          *
 708          *  This function reads one byte of received data from the buffer. If more than
 709          *  one byte has been received from the host, the rest of the data will be lost.
 710          *
 711          * \return
 712          *  Received one character.
 713          *
 714          * \globalvars
 715          *   USBUART_cdcDataOutEp: CDC OUT endpoint number used.
 716          *
 717          * \reentrant
 718          *  No.
 719          *
 720          ***************************************************************************/
 721          uint8 USBUART_GetChar(void) 
 722          {
 723   1           uint8 rxData;
 724   1           uint8 epNumber = USBUART_cdcDataOutEp[USBUART_activeCom];
 725   1      
 726   1          (void) USBUART_ReadOutEP(epNumber, &rxData, 1u);
 727   1      
 728   1      #if (USBUART_EP_MANAGEMENT_DMA_MANUAL)
                  /* Wait until DMA complete transferring data from OUT endpoint buffer. */
                  while (USBUART_OUT_BUFFER_FULL == USBUART_GetEPState(epNumber))
                  {
                  }
              
                  /* Enable OUT endpoint to communicate with host. */
                  USBUART_EnableOutEP(epNumber);
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 13  

              #endif /* (USBUART_EP_MANAGEMENT_DMA_MANUAL) */
 737   1      
 738   1          return (rxData);
 739   1      }
 740          
 741          
 742          /*******************************************************************************
 743          * Function Name: USBUART_IsLineChanged
 744          ****************************************************************************//**
 745          *
 746          *  This function returns clear on read status of the line. It returns not zero
 747          *  value when the host sends updated coding or control information to the
 748          *  device. The USBUART_GetDTERate(), USBUART_GetCharFormat()
 749          *  or USBUART_GetParityType() or USBUART_GetDataBits() API
 750          *  should be called to read data coding information.
 751          *  The USBUART_GetLineControl() API should be called to read line
 752          *  control information.
 753          *
 754          * \return
 755          *  If SET_LINE_CODING or CDC_SET_CONTROL_LINE_STATE requests are received, it
 756          *  returns a non-zero value. Otherwise, it returns zero.
 757          *  Return Value                 | Description
 758          *  -----------------------------|--------------------------
 759          *  USBUART_LINE_CODING_CHANGED  | Line coding changed
 760          *  USBUART_LINE_CONTROL_CHANGED |   Line control changed
 761          *
 762          * \globalvars
 763          *  - \ref USBUART_transferState: it is checked to be sure then OUT
 764          *    data phase has been complete, and data written to the lineCoding or
 765          *    Control Bitmap buffer.
 766          *  - \ref USBUART_linesChanged: used as a flag to be aware that
 767          *    Host has been sent request for changing Line Coding or Control Bitmap.
 768          *
 769          *******************************************************************************/
 770          uint8 USBUART_IsLineChanged(void) 
 771          {
 772   1          uint8 state = 0u;
 773   1      
 774   1          /* transferState is checked to be sure then OUT data phase has been complete */
 775   1          if (USBUART_transferState == USBUART_TRANS_STATE_IDLE)
 776   1          {
 777   2              if (USBUART_linesChanged[USBUART_activeCom] != 0u)
 778   2              {
 779   3                  state = USBUART_linesChanged[USBUART_activeCom];
 780   3                  USBUART_linesChanged[USBUART_activeCom] = 0u;
 781   3              }
 782   2          }
 783   1      
 784   1          return (state);
 785   1      }
 786          
 787          
 788          /***************************************************************************
 789          * Function Name: USBUART_GetDTERate
 790          ************************************************************************//**
 791          *
 792          *  This function returns the data terminal rate set for this port in bits
 793          *  per second.
 794          *
 795          * \return
 796          *  Returns a uint32 value of the data rate in bits per second.
 797          *
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 14  

 798          * \globalvars
 799          *  USBUART_linesCoding: First four bytes converted to uint32
 800          *    depend on compiler, and returned as a data rate.
 801          *
 802          *******************************************************************************/
 803          uint32 USBUART_GetDTERate(void) 
 804          {
 805   1          uint32 rate;
 806   1      
 807   1          rate = USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_RATE + 3u];
 808   1          rate = (rate << 8u) | USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_RATE + 2u];
 809   1          rate = (rate << 8u) | USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_RATE + 1u];
 810   1          rate = (rate << 8u) | USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_RATE];
 811   1      
 812   1          return (rate);
 813   1      }
 814          
 815          
 816          /*******************************************************************************
 817          * Function Name: USBUART_GetCharFormat
 818          ****************************************************************************//**
 819          *
 820          *  Returns the number of stop bits.
 821          *
 822          * \return
 823          *  Returns the number of stop bits.
 824          *  Return               |Value Description
 825          *  ---------------------|-------------------
 826          *  USBUART_1_STOPBIT    | 1 stop bit
 827          *  USBUART_1_5_STOPBITS | 1,5 stop bits
 828          *  USBUART_2_STOPBITS   | 2 stop bits
 829          *
 830          *
 831          * \globalvars
 832          *  USBUART_linesCoding: used to get a parameter.
 833          *
 834          *******************************************************************************/
 835          uint8 USBUART_GetCharFormat(void) 
 836          {
 837   1          return (USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_STOP_BITS]);
 838   1      }
 839          
 840          
 841          /*******************************************************************************
 842          * Function Name: USBUART_GetParityType
 843          ****************************************************************************//**
 844          *
 845          *  This function returns the parity type for the CDC port.
 846          *
 847          * \return
 848          *  Returns the parity type.
 849          *   Return               | Value Description
 850          *  ----------------------|-------------------
 851          *  USBUART_PARITY_NONE   | 1 stop bit
 852          *  USBUART_PARITY_ODD    | 1,5 stop bits
 853          *  USBUART_PARITY_EVEN   | 2 stop bits
 854          *  USBUART_PARITY_MARK   | Mark
 855          *  USBUART_PARITY_SPACE  | Space
 856          *
 857          * \globalvars
 858          *  USBUART_linesCoding: used to get a parameter.
 859          *
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 15  

 860          *******************************************************************************/
 861          uint8 USBUART_GetParityType(void) 
 862          {
 863   1          return (USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_PARITY]);
 864   1      }
 865          
 866          
 867          /***************************************************************************
 868          * Function Name: USBUART_GetDataBits
 869          ************************************************************************//**
 870          *
 871          *  This function returns the number of data bits for the CDC port.
 872          *
 873          * \return
 874          *  Returns the number of data bits.
 875          *  The number of data bits can be 5, 6, 7, 8 or 16.
 876          *
 877          * \globalvars
 878          *  USBUART_linesCoding: used to get a parameter.
 879          *
 880          *******************************************************************************/
 881          uint8 USBUART_GetDataBits(void) 
 882          {
 883   1          return (USBUART_linesCoding[USBUART_activeCom][USBUART_LINE_CODING_DATA_BITS]);
 884   1      }
 885          
 886          
 887          /***************************************************************************
 888          * Function Name: USBUART_GetLineControl
 889          ************************************************************************//**
 890          *
 891          *  This function returns Line control bitmap that the host sends to the
 892          *  device.
 893          *
 894          * \return
 895          *  Returns Line control bitmap.
 896          *  Return                   |Value Notes
 897          *  -------------------------|-----------------------------------------------
 898          *  USBUART_LINE_CONTROL_DTR |Indicates that a DTR signal is present. This signal corresponds to V.24 signa
             -l 108/2 and RS232 signal DTR.
 899          *  USBUART_LINE_CONTROL_RTS |Carrier control for half-duplex modems. This signal corresponds to V.24 signa
             -l 105 and RS232 signal RTS.
 900          *  RESERVED                 |The rest of the bits are reserved.
 901          *
 902          *  *Note* Some terminal emulation programs do not properly handle these
 903          *  control signals. They update information about DTR and RTS state only
 904          *  when the RTS signal changes the state.
 905          *
 906          * \globalvars
 907          *  USBUART_linesControlBitmap: used to get a parameter.
 908          *
 909          *******************************************************************************/
 910          uint16 USBUART_GetLineControl(void) 
 911          {
 912   1          return (USBUART_linesControlBitmap[USBUART_activeCom]);
 913   1      }
 914          
 915          
 916          /*******************************************************************************
 917          * Function Name: USBUART_SendSerialState
 918          ****************************************************************************//**
 919          *
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 16  

 920          *  Sends the serial state notification to the host using the interrupt
 921          *  endpoint for the COM port selected using the API SetComPort().The
 922          *  USBUART_NotificationIsReady() API must be called to check if the
 923          *  Component is ready to send more serial state to the host. The API will
 924          *  not send the notification data if the interrupt endpoint Max Packet Size
 925          *  is less than the required 10 bytes.
 926          *
 927          * \param uint16 serialState
 928          *  16-bit value that will be sent from the device to the
 929          *  host as SERIAL_STATE notification using the IN interrupt endpoint. Refer
 930          *  to revision 1.2 of the CDC PSTN Subclass specification for bit field
 931          *  definitions of the 16-bit serial state value.
 932          *
 933          *******************************************************************************/
 934          void USBUART_SendSerialState (uint16 serialState) 
 935          {
 936   1          uint8 epNumber = USBUART_cdcCommInInterruptEp[USBUART_activeCom];
 937   1      
 938   1          if(USBUART_SERIAL_STATE_SIZE <= USBUART_EP[epNumber].bufferSize)
 939   1          {
 940   2              /* Save current SERIAL_STATE bitmap. */
 941   2              USBUART_serialStateBitmap[USBUART_activeCom] = serialState;
 942   2      
 943   2              /* Add interface number */
 944   2              USBUART_serialStateNotification.wIndex = USBUART_EP[epNumber].interface;
 945   2      
 946   2              /*Form SERIAL_STATE data*/
 947   2              USBUART_serialStateNotification.wSerialState =    LO8(USBUART_serialStateBitmap[USBUART_activeCom]
             -);
 948   2              USBUART_serialStateNotification.wSerialStateMSB = HI8(USBUART_serialStateBitmap[USBUART_activeCom]
             -);
 949   2      
 950   2              USBUART_LoadInEP(epNumber, (uint8 *) &USBUART_serialStateNotification, sizeof(USBUART_serialStateN
             -otification));
 951   2          }
 952   1      }
 953          
 954          
 955          /*******************************************************************************
 956          * Function Name: USBUART_GetSerialState
 957          ****************************************************************************//**
 958          *
 959          *  This function returns the current serial state value for the COM port
 960          *  selected using the API SetComPort().
 961          *
 962          * \return
 963          *  16-bit serial state value. Refer to revision 1.2 of the CDC PSTN Subclass
 964          *  specification for bit field definitions of the 16-bit serial state value.
 965          *
 966          *******************************************************************************/
 967          uint16 USBUART_GetSerialState(void) 
 968          {
 969   1          return USBUART_serialStateBitmap[USBUART_activeCom];
 970   1      }
 971          
 972          
 973          /*******************************************************************************
 974          * Function Name: USBUART_NotificationIsReady
 975          ****************************************************************************//**
 976          *
 977          *  This function returns a non-zero value if the Component is ready to send
 978          *  more notifications to the host; otherwise, it returns zero. The function
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 17  

 979          *  should be called before sending new notifications when using
 980          *  USBUART_SendSerialState() to ensure that any previous
 981          *  notification data has been already sent to the host.
 982          *
 983          * \return
 984          *  If the buffer can accept new data(endpoint buffer not full), this
 985          *  function returns a non-zero value. Otherwise, it returns zero.
 986          *
 987          * \globalvars
 988          *   USBUART_cdcDataInEp: CDC IN endpoint number used.
 989          *
 990          *******************************************************************************/
 991          uint8 USBUART_NotificationIsReady(void) 
 992          {
 993   1          return (USBUART_EP[USBUART_cdcCommInInterruptEp[USBUART_activeCom]].apiEpState);
 994   1      }
 995          
 996          
 997          /*******************************************************************************
 998          * Function Name: USBUART_SetComPort
 999          ****************************************************************************//**
1000          *
1001          *  This function allows the user to select from one of the two COM ports
1002          *  they wish to address in the instance of having multiple COM ports
1003          *  instantiated though the use of a composite device. Once set, all future
1004          *  function calls related to the USBUART will be affected. This addressed
1005          *  COM port can be changed during run time.
1006          *
1007          * \param comNumber
1008          *  Contains the COM interface the user wishes to address. Value can either
1009          *  be 0 or 1 since a maximum of only 2 COM ports can be supported. Note that
1010          *  this COM port number is not the COM port number assigned on the PC side
1011          *  for the UART communication. If a value greater than 1 is passed, the
1012          *  function returns without performing any action.
1013          *
1014          *******************************************************************************/
1015          void USBUART_SetComPort(uint8 comNumber) 
1016          {
1017   1          if ((USBUART_activeCom != comNumber) && \
1018   1                  (comNumber < USBUART_MAX_MULTI_COM_NUM ))
1019   1          {
1020   2              USBUART_activeCom = comNumber;
1021   2          }
1022   1      }
1023          
1024          
1025          /*******************************************************************************
1026          * Function Name: USBUART_GetComPort
1027          ****************************************************************************//**
1028          *
1029          *  This function returns the current selected COM port that the user is
1030          *  currently addressing in the instance of having multiple COM ports
1031          *  instantiated though the use of a composite device.
1032          *
1033          * \return
1034          *  Returns the currently selected COM port. Value can either be 0 or 1 since
1035          *  a maximum of only 2 COM ports can be supported. . Note that this COM port
1036          *  number is not the COM port number assigned on the PC side for the UART
1037          *  communication.
1038          *
1039          *******************************************************************************/
1040          uint8 USBUART_GetComPort(void) 
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 18  

1041          {
1042   1          return (USBUART_activeCom);
1043   1      }
1044          
1045          
1046          #endif  /* (USBUART_ENABLE_CDC_CLASS_API) */
1047          
1048          
1049          /***************************************************************************
1050          * Function Name: USBUART_Cdc_EpInit
1051          ************************************************************************//**
1052          *
1053          *  \internal
1054          *  This routine decide type of endpoint (IN, OUT, Notification) and same to
1055          *   appropriate global variables  according to COM port number.
1056          *   USBUART_cdcDataInEp[], USBUART_cdcCommInInterruptEp[],
1057          *   USBUART_cdcDataOutEp[]
1058          *
1059          * \param pEP: Pointer to structure with current EP description.
1060          * \param epNum: EP number
1061          * \param cdcComNums: Bit array of current COM ports for CDC IN, OUT,
1062          *        and notification EPs(0 - COM port 1, 1- COM port 2)
1063          *
1064          * \return
1065          *  Updated cdcComNums
1066          *
1067          * \reentrant
1068          *  No.
1069          *
1070          ***************************************************************************/
1071          uint8 USBUART_Cdc_EpInit(const T_USBUART_EP_SETTINGS_BLOCK CYCODE *pEP, uint8 epNum, uint8 cdcComNums) 
1072          {
1073   1          uint8 epType;
1074   1      
1075   1          epType = pEP->attributes & USBUART_EP_TYPE_MASK;
1076   1      
1077   1          if (0u != (pEP->addr & USBUART_DIR_IN))
1078   1          {
1079   2              if (epType != USBUART_EP_TYPE_INT)
1080   2              {
1081   3                  USBUART_cdcDataInEp[USBUART_GET_EP_COM_NUM(cdcComNums, USBUART_CDC_IN_EP)] = epNum;
1082   3                  cdcComNums |= (uint8)(USBUART_COM_PORT2 << USBUART_CDC_IN_EP);
1083   3              }
1084   2              else
1085   2              {
1086   3      
1087   3                  USBUART_cdcCommInInterruptEp[USBUART_GET_EP_COM_NUM(cdcComNums, USBUART_CDC_NOTE_EP)] = epNum;
1088   3                  cdcComNums |= (uint8)(USBUART_COM_PORT2 << USBUART_CDC_NOTE_EP);
1089   3              }
1090   2          }
1091   1          else
1092   1          {
1093   2              if (epType != USBUART_EP_TYPE_INT)
1094   2              {
1095   3                  USBUART_cdcDataOutEp[USBUART_GET_EP_COM_NUM(cdcComNums, USBUART_CDC_OUT_EP)] = epNum;
1096   3                  cdcComNums |= (uint8)(USBUART_COM_PORT2 << USBUART_CDC_OUT_EP);
1097   3              }
1098   2          }
1099   1          return (cdcComNums);
1100   1      }
1101          
1102          
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 19  

1103          /*******************************************************************************
1104          * Additional user functions supporting CDC Requests
1105          ********************************************************************************/
1106          
1107          /* `#START CDC_FUNCTIONS` Place any additional functions here */
1108          
1109          /* `#END` */
1110          
1111          #endif  /* (USBUART_ENABLE_CDC_CLASS) */
1112          
1113          
1114          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBUART_DispatchCDCClassRqst (BEGIN)
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0000 900000      R     MOV     DPTR,#requestHandled
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0005 906004            MOV     DPTR,#06004H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _USBUART_GetInterfaceComPort
000D 900000      R     MOV     DPTR,#comPort
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0012 906000            MOV     DPTR,#06000H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5480              ANL     A,#080H
001A FF                MOV     R7,A
001B 7E00              MOV     R6,#00H
001D EF                MOV     A,R7
001E 4E                ORL     A,R6
001F 6045              JZ      ?C0001
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 167
0021 906001            MOV     DPTR,#06001H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CCASE
002A 0000        R     DW      ?C0003
002C 21                DB      021H
002D 0000              DW      00H
002F 0000        R     DW      ?C0005
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0031         ?C0003:
                                           ; SOURCE LINE # 170
0031 900000      E     MOV     DPTR,#USBUART_currentTD
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 7407              MOV     A,#07H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
003A 900000      R     MOV     DPTR,#comPort
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 7E07              MOV     R6,#07H
0041 EF                MOV     A,R7
0042 8EF0              MOV     B,R6
0044 A4                MUL     AB
0045 FF                MOV     R7,A
0046 AEF0              MOV     R6,B
0048 7400        R     MOV     A,#LOW USBUART_linesCoding
004A 2F                ADD     A,R7
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 21  

004B F9                MOV     R1,A
004C 7400        R     MOV     A,#HIGH USBUART_linesCoding
004E 3E                ADDC    A,R6
004F FA                MOV     R2,A
0050 7B01              MOV     R3,#01H
0052 900000      E     MOV     DPTR,#USBUART_currentTD+02H
0055 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 172
0058 120000      E     LCALL   USBUART_InitControlRead
005B 900000      R     MOV     DPTR,#requestHandled
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0060 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
0063 020000      R     LJMP    ?C0005
0066         ?C0001:
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 191
0066 906001            MOV     DPTR,#06001H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 120000      E     LCALL   ?C?CCASE
006F 0000        R     DW      ?C0007
0071 20                DB      020H
0072 0000        R     DW      ?C0008
0074 22                DB      022H
0075 0000              DW      00H
0077 0000        R     DW      ?C0005
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0079         ?C0007:
                                           ; SOURCE LINE # 194
0079 900000      E     MOV     DPTR,#USBUART_currentTD
007C E4                CLR     A
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F 7407              MOV     A,#07H
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0082 900000      R     MOV     DPTR,#comPort
0085 E0                MOVX    A,@DPTR
0086 FF                MOV     R7,A
0087 7E07              MOV     R6,#07H
0089 EF                MOV     A,R7
008A 8EF0              MOV     B,R6
008C A4                MUL     AB
008D FF                MOV     R7,A
008E AEF0              MOV     R6,B
0090 7400        R     MOV     A,#LOW USBUART_linesCoding
0092 2F                ADD     A,R7
0093 F9                MOV     R1,A
0094 7400        R     MOV     A,#HIGH USBUART_linesCoding
0096 3E                ADDC    A,R6
0097 FA                MOV     R2,A
0098 7B01              MOV     R3,#01H
009A 900000      E     MOV     DPTR,#USBUART_currentTD+02H
009D 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 22  

                                           ; SOURCE LINE # 196
00A0 900000      R     MOV     DPTR,#comPort
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 7400        R     MOV     A,#LOW USBUART_linesChanged
00A7 2F                ADD     A,R7
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3400        R     ADDC    A,#HIGH USBUART_linesChanged
00AD F583              MOV     DPH,A
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 4401              ORL     A,#01H
00B4 FF                MOV     R7,A
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
00B7 120000      E     LCALL   USBUART_InitControlWrite
00BA 900000      R     MOV     DPTR,#requestHandled
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
00BF 803C              SJMP    ?C0005
                                           ; SOURCE LINE # 201
00C1         ?C0008:
                                           ; SOURCE LINE # 202
00C1 906002            MOV     DPTR,#06002H
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 7E00              MOV     R6,#00H
00C8 900000      R     MOV     DPTR,#comPort
00CB E0                MOVX    A,@DPTR
00CC FD                MOV     R5,A
00CD ED                MOV     A,R5
00CE 25E0              ADD     A,ACC
00D0 2400        R     ADD     A,#LOW USBUART_linesControlBitmap
00D2 F582              MOV     DPL,A
00D4 E4                CLR     A
00D5 3400        R     ADDC    A,#HIGH USBUART_linesControlBitmap
00D7 F583              MOV     DPH,A
00D9 EE                MOV     A,R6
00DA F0                MOVX    @DPTR,A
00DB A3                INC     DPTR
00DC EF                MOV     A,R7
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
00DE 900000      R     MOV     DPTR,#comPort
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 7400        R     MOV     A,#LOW USBUART_linesChanged
00E5 2F                ADD     A,R7
00E6 F582              MOV     DPL,A
00E8 E4                CLR     A
00E9 3400        R     ADDC    A,#HIGH USBUART_linesChanged
00EB F583              MOV     DPH,A
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF EF                MOV     A,R7
00F0 4402              ORL     A,#02H
00F2 FF                MOV     R7,A
00F3 EF                MOV     A,R7
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 23  

00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
00F5 120000      E     LCALL   USBUART_InitNoDataControlTransfer
00F8 900000      R     MOV     DPTR,#requestHandled
00FB EF                MOV     A,R7
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
00FD         ?C0005:
                                           ; SOURCE LINE # 221
00FD 900000      R     MOV     DPTR,#requestHandled
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
                                           ; SOURCE LINE # 222
0102         ?C0010:
0102 22                RET     
             ; FUNCTION USBUART_DispatchCDCClassRqst (END)

             ; FUNCTION _USBUART_GetInterfaceComPort (BEGIN)
                                           ; SOURCE LINE # 239
0000 900000      R     MOV     DPTR,#interface
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
0005 900000      R     MOV     DPTR,#comPort
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
000A 900000      R     MOV     DPTR,#res
000D 74FF              MOV     A,#0FFH
000F F0                MOVX    @DPTR,A
0010         ?C0011:
                                           ; SOURCE LINE # 245
0010 900000      R     MOV     DPTR,#comPort
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 C3                CLR     C
0017 9402              SUBB    A,#02H
0019 504C              JNC     ?C0012
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
001B 900000      R     MOV     DPTR,#comPort
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7400        R     MOV     A,#LOW USBUART_cdcCommInInterruptEp
0022 2F                ADD     A,R7
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        R     ADDC    A,#HIGH USBUART_cdcCommInInterruptEp
0028 F583              MOV     DPH,A
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#notEp
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
0031 900000      R     MOV     DPTR,#notEp
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 24  

0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 75F00B            MOV     B,#0BH
003A A4                MUL     AB
003B 2400        E     ADD     A,#LOW USBUART_EP+0AH
003D F582              MOV     DPL,A
003F E4                CLR     A
0040 3400        E     ADDC    A,#HIGH USBUART_EP+0AH
0042 F583              MOV     DPH,A
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#interface
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B EF                MOV     A,R7
004C B50610            CJNE    A,AR6,?C0013
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
004F 900000      R     MOV     DPTR,#comPort
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 900000      R     MOV     DPTR,#res
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0059 900000      R     MOV     DPTR,#comPort
005C 7402              MOV     A,#02H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
005F         ?C0013:
                                           ; SOURCE LINE # 255
005F 900000      R     MOV     DPTR,#comPort
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0065 80A9              SJMP    ?C0011
0067         ?C0012:
                                           ; SOURCE LINE # 257
0067 900000      R     MOV     DPTR,#res
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
                                           ; SOURCE LINE # 258
006C         ?C0014:
006C 22                RET     
             ; FUNCTION _USBUART_GetInterfaceComPort (END)

             ; FUNCTION USBUART_CDC_Init (BEGIN)
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 297
0000 900000      R     MOV     DPTR,#ret
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0005 900000      R     MOV     DPTR,#USBUART_activeCom
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
000A 900000      R     MOV     DPTR,#USBUART_linesChanged
000D E4                CLR     A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 25  

000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
000F 900000      R     MOV     DPTR,#USBUART_linesChanged+01H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0014 900000      R     MOV     DPTR,#comPort
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
0019         ?C0015:
0019 900000      R     MOV     DPTR,#comPort
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F C3                CLR     C
0020 9402              SUBB    A,#02H
0022 5039              JNC     ?C0016
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0024 900000      R     MOV     DPTR,#comPort
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
002B 2F                ADD     A,R7
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        R     ADDC    A,#HIGH USBUART_cdcDataOutEp
0031 F583              MOV     DPH,A
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#outEp
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
003A 900000      R     MOV     DPTR,#outEp
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 6013              JZ      ?C0017
0042 900000      R     MOV     DPTR,#outEp
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 7409              MOV     A,#09H
0049 D3                SETB    C
004A 9F                SUBB    A,R7
004B 4008              JC      ?C0017
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
004D 900000      R     MOV     DPTR,#outEp
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 120000      E     LCALL   _USBUART_EnableOutEP
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 311
0055         ?C0017:
0055 900000      R     MOV     DPTR,#comPort
0058 E0                MOVX    A,@DPTR
0059 04                INC     A
005A F0                MOVX    @DPTR,A
005B 80BC              SJMP    ?C0015
005D         ?C0016:
                                           ; SOURCE LINE # 314
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 26  

005D 900000      R     MOV     DPTR,#USBUART_cdcDataInEp
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 6031              JZ      ?C0020
0065 900000      R     MOV     DPTR,#USBUART_cdcDataOutEp
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B 6029              JZ      ?C0020
006D 900000      R     MOV     DPTR,#USBUART_cdcCommInInterruptEp
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 6021              JZ      ?C0020
0075 900000      R     MOV     DPTR,#USBUART_cdcDataInEp
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B C3                CLR     C
007C 9409              SUBB    A,#09H
007E 5016              JNC     ?C0020
0080 900000      R     MOV     DPTR,#USBUART_cdcDataOutEp
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 C3                CLR     C
0087 9409              SUBB    A,#09H
0089 500B              JNC     ?C0020
008B 900000      R     MOV     DPTR,#USBUART_cdcCommInInterruptEp
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 C3                CLR     C
0092 9409              SUBB    A,#09H
0094 4006              JC      ?C0019
0096         ?C0020:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0096 900000      R     MOV     DPTR,#ret
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
009C         ?C0019:
                                           ; SOURCE LINE # 324
009C 900000      R     MOV     DPTR,#ret
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
                                           ; SOURCE LINE # 325
00A1         ?C0021:
00A1 22                RET     
             ; FUNCTION USBUART_CDC_Init (END)

             ; FUNCTION _USBUART_PutData (BEGIN)
                                           ; SOURCE LINE # 358
0000 900000      R     MOV     DPTR,#pData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#length
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 27  

000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
000E 900000      R     MOV     DPTR,#USBUART_activeCom
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 7400        R     MOV     A,#LOW USBUART_cdcDataInEp
0015 2F                ADD     A,R7
0016 F582              MOV     DPL,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH USBUART_cdcDataInEp
001B F583              MOV     DPH,A
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 900000      R     MOV     DPTR,#epNumber
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0024 900000      R     MOV     DPTR,#epNumber
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 75F00B            MOV     B,#0BH
002D A4                MUL     AB
002E 2400        E     ADD     A,#LOW USBUART_EP+08H
0030 F582              MOV     DPL,A
0032 E4                CLR     A
0033 3400        E     ADDC    A,#HIGH USBUART_EP+08H
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 FE                MOV     R6,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#length
003F E0                MOVX    A,@DPTR
0040 FC                MOV     R4,A
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FD                MOV     R5,A
0044 D3                SETB    C
0045 ED                MOV     A,R5
0046 9F                SUBB    A,R7
0047 EC                MOV     A,R4
0048 9E                SUBB    A,R6
0049 4025              JC      ?C0022
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 366
004B 900000      R     MOV     DPTR,#epNumber
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 75F00B            MOV     B,#0BH
0054 A4                MUL     AB
0055 2400        E     ADD     A,#LOW USBUART_EP+08H
0057 F582              MOV     DPL,A
0059 E4                CLR     A
005A 3400        E     ADDC    A,#HIGH USBUART_EP+08H
005C F583              MOV     DPH,A
005E E0                MOVX    A,@DPTR
005F FE                MOV     R6,A
0060 A3                INC     DPTR
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 28  

0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 900000      R     MOV     DPTR,#length
0066 EE                MOV     A,R6
0067 F0                MOVX    @DPTR,A
0068 A3                INC     DPTR
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
006B 7F00              MOV     R7,#00H
006D 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 370
0070         ?C0022:
                                           ; SOURCE LINE # 372
0070 900000      R     MOV     DPTR,#epNumber
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 900000      R     MOV     DPTR,#pData
0078 120000      E     LCALL   ?C?PLDXDATA
007B 900000      R     MOV     DPTR,#length
007E E0                MOVX    A,@DPTR
007F FC                MOV     R4,A
0080 A3                INC     DPTR
0081 E0                MOVX    A,@DPTR
0082 FD                MOV     R5,A
0083 900000      E     MOV     DPTR,#?_USBUART_LoadInEP?BYTE+04H
0086 EC                MOV     A,R4
0087 F0                MOVX    @DPTR,A
0088 A3                INC     DPTR
0089 ED                MOV     A,R5
008A F0                MOVX    @DPTR,A
008B 120000      E     LCALL   _USBUART_LoadInEP
                                           ; SOURCE LINE # 373
008E 22                RET     
             ; FUNCTION _USBUART_PutData (END)

             ; FUNCTION _USBUART_StrLen (BEGIN)
                                           ; SOURCE LINE # 388
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
0006 900000      R     MOV     DPTR,#len
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
000E         ?C0025:
                                           ; SOURCE LINE # 392
000E 900000      R     MOV     DPTR,#string
0011 120000      E     LCALL   ?C?PLDXDATA
0014 900000      R     MOV     DPTR,#len
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C E9                MOV     A,R1
001D 2F                ADD     A,R7
001E F9                MOV     R1,A
001F EA                MOV     A,R2
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 29  

0020 3E                ADDC    A,R6
0021 FA                MOV     R2,A
0022 120000      E     LCALL   ?C?CLDPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 600C              JZ      ?C0026
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
0029 900000      R     MOV     DPTR,#len
002C E4                CLR     A
002D 75F001            MOV     B,#01H
0030 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 395
0033 80D9              SJMP    ?C0025
0035         ?C0026:
                                           ; SOURCE LINE # 397
0035 900000      R     MOV     DPTR,#len
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
                                           ; SOURCE LINE # 398
003D         ?C0027:
003D 22                RET     
             ; FUNCTION _USBUART_StrLen (END)

             ; FUNCTION _USBUART_PutString (BEGIN)
                                           ; SOURCE LINE # 425
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 429
0006 900000      R     MOV     DPTR,#bufIndex
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
000E 900000      R     MOV     DPTR,#USBUART_activeCom
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 7400        R     MOV     A,#LOW USBUART_cdcDataInEp
0015 2F                ADD     A,R7
0016 F582              MOV     DPL,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH USBUART_cdcDataInEp
001B F583              MOV     DPH,A
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 900000      R     MOV     DPTR,#epNumber
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
0024 900000      R     MOV     DPTR,#string
0027 120000      E     LCALL   ?C?PLDXDATA
002A 120000      R     LCALL   _USBUART_StrLen
002D 900000      R     MOV     DPTR,#strLength
0030 EE                MOV     A,R6
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 30  

0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
0035         ?C0030:
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 439
0035 900000      R     MOV     DPTR,#epNumber
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 75F00B            MOV     B,#0BH
003E A4                MUL     AB
003F 2400        E     ADD     A,#LOW USBUART_EP+08H
0041 F582              MOV     DPL,A
0043 E4                CLR     A
0044 3400        E     ADDC    A,#HIGH USBUART_EP+08H
0046 F583              MOV     DPH,A
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#strLength
0050 E0                MOVX    A,@DPTR
0051 FC                MOV     R4,A
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054 FD                MOV     R5,A
0055 D3                SETB    C
0056 ED                MOV     A,R5
0057 9F                SUBB    A,R7
0058 EC                MOV     A,R4
0059 9E                SUBB    A,R6
005A 401A              JC      ?C0031
005C 900000      R     MOV     DPTR,#epNumber
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 75F00B            MOV     B,#0BH
0065 A4                MUL     AB
0066 2400        E     ADD     A,#LOW USBUART_EP+08H
0068 F582              MOV     DPL,A
006A E4                CLR     A
006B 3400        E     ADDC    A,#HIGH USBUART_EP+08H
006D F583              MOV     DPH,A
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 8008              SJMP    ?C0032
0076         ?C0031:
0076 900000      R     MOV     DPTR,#strLength
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E         ?C0032:
007E 900000      R     MOV     DPTR,#sendLength
0081 EE                MOV     A,R6
0082 F0                MOVX    @DPTR,A
0083 A3                INC     DPTR
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 31  

0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
0086 900000      R     MOV     DPTR,#epNumber
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#string
008E 120000      E     LCALL   ?C?PLDXDATA
0091 900000      R     MOV     DPTR,#bufIndex
0094 E0                MOVX    A,@DPTR
0095 FC                MOV     R4,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 FD                MOV     R5,A
0099 E9                MOV     A,R1
009A 2D                ADD     A,R5
009B F9                MOV     R1,A
009C EA                MOV     A,R2
009D 3C                ADDC    A,R4
009E FA                MOV     R2,A
009F 900000      R     MOV     DPTR,#sendLength
00A2 E0                MOVX    A,@DPTR
00A3 FC                MOV     R4,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 FD                MOV     R5,A
00A7 900000      E     MOV     DPTR,#?_USBUART_LoadInEP?BYTE+04H
00AA EC                MOV     A,R4
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD ED                MOV     A,R5
00AE F0                MOVX    @DPTR,A
00AF 120000      E     LCALL   _USBUART_LoadInEP
                                           ; SOURCE LINE # 444
00B2 900000      R     MOV     DPTR,#strLength
00B5 E0                MOVX    A,@DPTR
00B6 FE                MOV     R6,A
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA 900000      R     MOV     DPTR,#sendLength
00BD E0                MOVX    A,@DPTR
00BE FC                MOV     R4,A
00BF A3                INC     DPTR
00C0 E0                MOVX    A,@DPTR
00C1 FD                MOV     R5,A
00C2 C3                CLR     C
00C3 EF                MOV     A,R7
00C4 9D                SUBB    A,R5
00C5 FF                MOV     R7,A
00C6 EE                MOV     A,R6
00C7 9C                SUBB    A,R4
00C8 FE                MOV     R6,A
00C9 900000      R     MOV     DPTR,#strLength
00CC EE                MOV     A,R6
00CD F0                MOVX    @DPTR,A
00CE A3                INC     DPTR
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
00D1 900000      R     MOV     DPTR,#strLength
00D4 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 32  

00D5 FE                MOV     R6,A
00D6 A3                INC     DPTR
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 D3                SETB    C
00DA EF                MOV     A,R7
00DB 9400              SUBB    A,#00H
00DD EE                MOV     A,R6
00DE 9400              SUBB    A,#00H
00E0 5028              JNC     ?C0034
00E2 900000      R     MOV     DPTR,#epNumber
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 75F00B            MOV     B,#0BH
00EB A4                MUL     AB
00EC 2400        E     ADD     A,#LOW USBUART_EP+08H
00EE F582              MOV     DPL,A
00F0 E4                CLR     A
00F1 3400        E     ADDC    A,#HIGH USBUART_EP+08H
00F3 F583              MOV     DPH,A
00F5 E0                MOVX    A,@DPTR
00F6 FE                MOV     R6,A
00F7 A3                INC     DPTR
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA 900000      R     MOV     DPTR,#sendLength
00FD E0                MOVX    A,@DPTR
00FE FC                MOV     R4,A
00FF A3                INC     DPTR
0100 E0                MOVX    A,@DPTR
0101 FD                MOV     R5,A
0102 ED                MOV     A,R5
0103 6F                XRL     A,R7
0104 7002              JNZ     ?C0070
0106 EC                MOV     A,R4
0107 6E                XRL     A,R6
0108         ?C0070:
0108 704B              JNZ     ?C0028
010A         ?C0034:
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
010A 900000      R     MOV     DPTR,#sendLength
010D E0                MOVX    A,@DPTR
010E FE                MOV     R6,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 900000      R     MOV     DPTR,#bufIndex
0115 EE                MOV     A,R6
0116 8FF0              MOV     B,R7
0118 120000      E     LCALL   ?C?IILDX
011B         ?C0035:
                                           ; SOURCE LINE # 452
011B 900000      R     MOV     DPTR,#epNumber
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 EF                MOV     A,R7
0121 75F00B            MOV     B,#0BH
0124 A4                MUL     AB
0125 2400        E     ADD     A,#LOW USBUART_EP+01H
0127 F582              MOV     DPL,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 33  

0129 E4                CLR     A
012A 3400        E     ADDC    A,#HIGH USBUART_EP+01H
012C F583              MOV     DPH,A
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 EF                MOV     A,R7
0131 60E8              JZ      ?C0035
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0133         ?C0036:
                                           ; SOURCE LINE # 460
0133 900000      R     MOV     DPTR,#strLength
0136 E0                MOVX    A,@DPTR
0137 FE                MOV     R6,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B EF                MOV     A,R7
013C 4E                ORL     A,R6
013D 7016              JNZ     ?C0028
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
013F 900000      R     MOV     DPTR,#epNumber
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
0144 7B00              MOV     R3,#00H
0146 7A00              MOV     R2,#00H
0148 7900              MOV     R1,#00H
014A 900000      E     MOV     DPTR,#?_USBUART_LoadInEP?BYTE+04H
014D E4                CLR     A
014E F0                MOVX    @DPTR,A
014F A3                INC     DPTR
0150 E4                CLR     A
0151 F0                MOVX    @DPTR,A
0152 120000      E     LCALL   _USBUART_LoadInEP
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0155         ?C0028:
                                           ; SOURCE LINE # 466
0155 900000      R     MOV     DPTR,#strLength
0158 E0                MOVX    A,@DPTR
0159 FE                MOV     R6,A
015A A3                INC     DPTR
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
015D D3                SETB    C
015E EF                MOV     A,R7
015F 9400              SUBB    A,#00H
0161 EE                MOV     A,R6
0162 9400              SUBB    A,#00H
0164 4003              JC      $ + 5H
0166 020000      R     LJMP    ?C0030
                                           ; SOURCE LINE # 467
0169 22                RET     
             ; FUNCTION _USBUART_PutString (END)

             ; FUNCTION _USBUART_PutChar (BEGIN)
                                           ; SOURCE LINE # 488
0000 900000      R     MOV     DPTR,#txDataByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 34  

                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 491
0005 900000      R     MOV     DPTR,#txDataByte
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#dataByte
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
000F 900000      R     MOV     DPTR,#USBUART_activeCom
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 7400        R     MOV     A,#LOW USBUART_cdcDataInEp
0016 2F                ADD     A,R7
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3400        R     ADDC    A,#HIGH USBUART_cdcDataInEp
001C F583              MOV     DPH,A
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7B01              MOV     R3,#01H
0022 7A00        R     MOV     R2,#HIGH dataByte
0024 7900        R     MOV     R1,#LOW dataByte
0026 900000      E     MOV     DPTR,#?_USBUART_LoadInEP?BYTE+04H
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C 7401              MOV     A,#01H
002E F0                MOVX    @DPTR,A
002F 120000      E     LCALL   _USBUART_LoadInEP
                                           ; SOURCE LINE # 494
0032 22                RET     
             ; FUNCTION _USBUART_PutChar (END)

             ; FUNCTION USBUART_PutCRLF (BEGIN)
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 517
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7400        R     MOV     A,#LOW USBUART_cdcDataInEp
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH USBUART_cdcDataInEp
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 7BFF              MOV     R3,#0FFH
0013 7A00        R     MOV     R2,#HIGH txData
0015 7900        R     MOV     R1,#LOW txData
0017 900000      E     MOV     DPTR,#?_USBUART_LoadInEP?BYTE+04H
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D 7402              MOV     A,#02H
001F F0                MOVX    @DPTR,A
0020 120000      E     LCALL   _USBUART_LoadInEP
                                           ; SOURCE LINE # 518
0023 22                RET     
             ; FUNCTION USBUART_PutCRLF (END)
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 35  


             ; FUNCTION USBUART_GetCount (BEGIN)
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 543
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH USBUART_cdcDataOutEp
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#epNumber
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
0016 900000      R     MOV     DPTR,#epNumber
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 75F00B            MOV     B,#0BH
001F A4                MUL     AB
0020 2400        E     ADD     A,#LOW USBUART_EP+01H
0022 F582              MOV     DPL,A
0024 E4                CLR     A
0025 3400        E     ADDC    A,#HIGH USBUART_EP+01H
0027 F583              MOV     DPH,A
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C B40112            CJNE    A,#01H,?C0041
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
002F 900000      R     MOV     DPTR,#epNumber
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 120000      E     LCALL   _USBUART_GetEPCount
0037 900000      R     MOV     DPTR,#bytesCount
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
003F 8008              SJMP    ?C0042
0041         ?C0041:
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0041 900000      R     MOV     DPTR,#bytesCount
0044 E4                CLR     A
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
0049         ?C0042:
                                           ; SOURCE LINE # 554
0049 900000      R     MOV     DPTR,#bytesCount
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 36  

004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
                                           ; SOURCE LINE # 555
0051         ?C0043:
0051 22                RET     
             ; FUNCTION USBUART_GetCount (END)

             ; FUNCTION USBUART_DataIsReady (BEGIN)
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH USBUART_cdcDataOutEp
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 120000      E     LCALL   _USBUART_GetEPState
                                           ; SOURCE LINE # 580
0014         ?C0044:
0014 22                RET     
             ; FUNCTION USBUART_DataIsReady (END)

             ; FUNCTION USBUART_CDCIsReady (BEGIN)
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7400        R     MOV     A,#LOW USBUART_cdcDataInEp
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH USBUART_cdcDataInEp
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 120000      E     LCALL   _USBUART_GetEPState
                                           ; SOURCE LINE # 605
0014         ?C0045:
0014 22                RET     
             ; FUNCTION USBUART_CDCIsReady (END)

             ; FUNCTION _USBUART_GetData (BEGIN)
                                           ; SOURCE LINE # 637
0000 900000      R     MOV     DPTR,#pData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#length
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 37  

                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
000E 900000      R     MOV     DPTR,#USBUART_activeCom
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
0015 2F                ADD     A,R7
0016 F582              MOV     DPL,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH USBUART_cdcDataOutEp
001B F583              MOV     DPH,A
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 900000      R     MOV     DPTR,#epNumber
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
0024 900000      R     MOV     DPTR,#epNumber
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 900000      R     MOV     DPTR,#pData
002C 120000      E     LCALL   ?C?PLDXDATA
002F 900000      R     MOV     DPTR,#length
0032 E0                MOVX    A,@DPTR
0033 FC                MOV     R4,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FD                MOV     R5,A
0037 900000      E     MOV     DPTR,#?_USBUART_ReadOutEP?BYTE+04H
003A EC                MOV     A,R4
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D ED                MOV     A,R5
003E F0                MOVX    @DPTR,A
003F 120000      E     LCALL   _USBUART_ReadOutEP
0042 900000      R     MOV     DPTR,#length
0045 EE                MOV     A,R6
0046 F0                MOVX    @DPTR,A
0047 A3                INC     DPTR
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
004A 900000      R     MOV     DPTR,#length
004D E0                MOVX    A,@DPTR
004E FE                MOV     R6,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
                                           ; SOURCE LINE # 655
0052         ?C0046:
0052 22                RET     
             ; FUNCTION _USBUART_GetData (END)

             ; FUNCTION _USBUART_GetAll (BEGIN)
                                           ; SOURCE LINE # 682
0000 900000      R     MOV     DPTR,#pData
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
0006 900000      R     MOV     DPTR,#USBUART_activeCom
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 38  

000B 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
000D 2F                ADD     A,R7
000E F582              MOV     DPL,A
0010 E4                CLR     A
0011 3400        R     ADDC    A,#HIGH USBUART_cdcDataOutEp
0013 F583              MOV     DPH,A
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 900000      R     MOV     DPTR,#epNumber
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
001C 900000      R     MOV     DPTR,#epNumber
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#pData
0024 120000      E     LCALL   ?C?PLDXDATA
0027 900000      R     MOV     DPTR,#epNumber
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C EE                MOV     A,R6
002D 75F00B            MOV     B,#0BH
0030 A4                MUL     AB
0031 2400        E     ADD     A,#LOW USBUART_EP+08H
0033 F582              MOV     DPL,A
0035 E4                CLR     A
0036 3400        E     ADDC    A,#HIGH USBUART_EP+08H
0038 F583              MOV     DPH,A
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F 900000      E     MOV     DPTR,#?_USBUART_ReadOutEP?BYTE+04H
0042 EC                MOV     A,R4
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 ED                MOV     A,R5
0046 F0                MOVX    @DPTR,A
0047 120000      E     LCALL   _USBUART_ReadOutEP
004A 900000      R     MOV     DPTR,#dataLength
004D EE                MOV     A,R6
004E F0                MOVX    @DPTR,A
004F A3                INC     DPTR
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
0052 900000      R     MOV     DPTR,#dataLength
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
                                           ; SOURCE LINE # 701
005A         ?C0047:
005A 22                RET     
             ; FUNCTION _USBUART_GetAll (END)

             ; FUNCTION USBUART_GetChar (BEGIN)
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 724
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 39  

0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH USBUART_cdcDataOutEp
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#epNumber
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 726
0016 900000      R     MOV     DPTR,#epNumber
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 7B01              MOV     R3,#01H
001D 7A00        R     MOV     R2,#HIGH rxData
001F 7900        R     MOV     R1,#LOW rxData
0021 900000      E     MOV     DPTR,#?_USBUART_ReadOutEP?BYTE+04H
0024 E4                CLR     A
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 7401              MOV     A,#01H
0029 F0                MOVX    @DPTR,A
002A 120000      E     LCALL   _USBUART_ReadOutEP
                                           ; SOURCE LINE # 738
002D 900000      R     MOV     DPTR,#rxData
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
                                           ; SOURCE LINE # 739
0032         ?C0048:
0032 22                RET     
             ; FUNCTION USBUART_GetChar (END)

             ; FUNCTION USBUART_IsLineChanged (BEGIN)
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0000 900000      R     MOV     DPTR,#state
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
0005 900000      E     MOV     DPTR,#USBUART_transferState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 703B              JNZ     ?C0049
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
000D 900000      R     MOV     DPTR,#USBUART_activeCom
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 7400        R     MOV     A,#LOW USBUART_linesChanged
0014 2F                ADD     A,R7
0015 F582              MOV     DPL,A
0017 E4                CLR     A
0018 3400        R     ADDC    A,#HIGH USBUART_linesChanged
001A F583              MOV     DPH,A
001C E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 40  

001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 6027              JZ      ?C0049
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
0021 900000      R     MOV     DPTR,#USBUART_activeCom
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 7400        R     MOV     A,#LOW USBUART_linesChanged
0028 2F                ADD     A,R7
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH USBUART_linesChanged
002E F583              MOV     DPH,A
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#state
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0037 900000      R     MOV     DPTR,#USBUART_activeCom
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 7400        R     MOV     A,#LOW USBUART_linesChanged
003E 2F                ADD     A,R7
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3400        R     ADDC    A,#HIGH USBUART_linesChanged
0044 F583              MOV     DPH,A
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0048         ?C0049:
                                           ; SOURCE LINE # 784
0048 900000      R     MOV     DPTR,#state
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
                                           ; SOURCE LINE # 785
004D         ?C0051:
004D 22                RET     
             ; FUNCTION USBUART_IsLineChanged (END)

             ; FUNCTION USBUART_GetDTERate (BEGIN)
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 807
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 75F007            MOV     B,#07H
0009 A4                MUL     AB
000A 2400        R     ADD     A,#LOW USBUART_linesCoding+03H
000C F582              MOV     DPL,A
000E E4                CLR     A
000F 3400        R     ADDC    A,#HIGH USBUART_linesCoding+03H
0011 F583              MOV     DPH,A
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 FC                MOV     R4,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 41  

0017 FD                MOV     R5,A
0018 FE                MOV     R6,A
0019 900000      R     MOV     DPTR,#rate
001C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 808
001F 900000      R     MOV     DPTR,#rate
0022 120000      E     LCALL   ?C?LLDXDATA
0025 7808              MOV     R0,#08H
0027 120000      E     LCALL   ?C?LSHL
002A A804              MOV     R0,AR4
002C A905              MOV     R1,AR5
002E AA06              MOV     R2,AR6
0030 AB07              MOV     R3,AR7
0032 900000      R     MOV     DPTR,#USBUART_activeCom
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 75F007            MOV     B,#07H
003B A4                MUL     AB
003C 2400        R     ADD     A,#LOW USBUART_linesCoding+02H
003E F582              MOV     DPL,A
0040 E4                CLR     A
0041 3400        R     ADDC    A,#HIGH USBUART_linesCoding+02H
0043 F583              MOV     DPH,A
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 E4                CLR     A
0048 FC                MOV     R4,A
0049 FD                MOV     R5,A
004A FE                MOV     R6,A
004B 120000      E     LCALL   ?C?LOR
004E 900000      R     MOV     DPTR,#rate
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 809
0054 900000      R     MOV     DPTR,#rate
0057 120000      E     LCALL   ?C?LLDXDATA
005A 7808              MOV     R0,#08H
005C 120000      E     LCALL   ?C?LSHL
005F A804              MOV     R0,AR4
0061 A905              MOV     R1,AR5
0063 AA06              MOV     R2,AR6
0065 AB07              MOV     R3,AR7
0067 900000      R     MOV     DPTR,#USBUART_activeCom
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D 75F007            MOV     B,#07H
0070 A4                MUL     AB
0071 2400        R     ADD     A,#LOW USBUART_linesCoding+01H
0073 F582              MOV     DPL,A
0075 E4                CLR     A
0076 3400        R     ADDC    A,#HIGH USBUART_linesCoding+01H
0078 F583              MOV     DPH,A
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C E4                CLR     A
007D FC                MOV     R4,A
007E FD                MOV     R5,A
007F FE                MOV     R6,A
0080 120000      E     LCALL   ?C?LOR
0083 900000      R     MOV     DPTR,#rate
0086 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 42  

                                           ; SOURCE LINE # 810
0089 900000      R     MOV     DPTR,#rate
008C 120000      E     LCALL   ?C?LLDXDATA
008F 7808              MOV     R0,#08H
0091 120000      E     LCALL   ?C?LSHL
0094 A804              MOV     R0,AR4
0096 A905              MOV     R1,AR5
0098 AA06              MOV     R2,AR6
009A AB07              MOV     R3,AR7
009C 900000      R     MOV     DPTR,#USBUART_activeCom
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 75F007            MOV     B,#07H
00A5 A4                MUL     AB
00A6 2400        R     ADD     A,#LOW USBUART_linesCoding
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3400        R     ADDC    A,#HIGH USBUART_linesCoding
00AD F583              MOV     DPH,A
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 E4                CLR     A
00B2 FC                MOV     R4,A
00B3 FD                MOV     R5,A
00B4 FE                MOV     R6,A
00B5 120000      E     LCALL   ?C?LOR
00B8 900000      R     MOV     DPTR,#rate
00BB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 812
00BE 900000      R     MOV     DPTR,#rate
00C1 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 813
00C4         ?C0052:
00C4 22                RET     
             ; FUNCTION USBUART_GetDTERate (END)

             ; FUNCTION USBUART_GetCharFormat (BEGIN)
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 837
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 75F007            MOV     B,#07H
0009 A4                MUL     AB
000A 2400        R     ADD     A,#LOW USBUART_linesCoding+04H
000C F582              MOV     DPL,A
000E E4                CLR     A
000F 3400        R     ADDC    A,#HIGH USBUART_linesCoding+04H
0011 F583              MOV     DPH,A
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 838
0015         ?C0053:
0015 22                RET     
             ; FUNCTION USBUART_GetCharFormat (END)

             ; FUNCTION USBUART_GetParityType (BEGIN)
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 43  

                                           ; SOURCE LINE # 863
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 75F007            MOV     B,#07H
0009 A4                MUL     AB
000A 2400        R     ADD     A,#LOW USBUART_linesCoding+05H
000C F582              MOV     DPL,A
000E E4                CLR     A
000F 3400        R     ADDC    A,#HIGH USBUART_linesCoding+05H
0011 F583              MOV     DPH,A
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 864
0015         ?C0054:
0015 22                RET     
             ; FUNCTION USBUART_GetParityType (END)

             ; FUNCTION USBUART_GetDataBits (BEGIN)
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 75F007            MOV     B,#07H
0009 A4                MUL     AB
000A 2400        R     ADD     A,#LOW USBUART_linesCoding+06H
000C F582              MOV     DPL,A
000E E4                CLR     A
000F 3400        R     ADDC    A,#HIGH USBUART_linesCoding+06H
0011 F583              MOV     DPH,A
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 884
0015         ?C0055:
0015 22                RET     
             ; FUNCTION USBUART_GetDataBits (END)

             ; FUNCTION USBUART_GetLineControl (BEGIN)
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 911
                                           ; SOURCE LINE # 912
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 25E0              ADD     A,ACC
0008 2400        R     ADD     A,#LOW USBUART_linesControlBitmap
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        R     ADDC    A,#HIGH USBUART_linesControlBitmap
000F F583              MOV     DPH,A
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
                                           ; SOURCE LINE # 913
0016         ?C0056:
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 44  

0016 22                RET     
             ; FUNCTION USBUART_GetLineControl (END)

             ; FUNCTION _USBUART_SendSerialState (BEGIN)
                                           ; SOURCE LINE # 934
0000 900000      R     MOV     DPTR,#serialState
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 936
0008 900000      R     MOV     DPTR,#USBUART_activeCom
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 7400        R     MOV     A,#LOW USBUART_cdcCommInInterruptEp
000F 2F                ADD     A,R7
0010 F582              MOV     DPL,A
0012 E4                CLR     A
0013 3400        R     ADDC    A,#HIGH USBUART_cdcCommInInterruptEp
0015 F583              MOV     DPH,A
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#epNumber
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 938
001E 900000      R     MOV     DPTR,#epNumber
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 75F00B            MOV     B,#0BH
0027 A4                MUL     AB
0028 2400        E     ADD     A,#LOW USBUART_EP+08H
002A F582              MOV     DPL,A
002C E4                CLR     A
002D 3400        E     ADDC    A,#HIGH USBUART_EP+08H
002F F583              MOV     DPH,A
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 D3                SETB    C
0037 740A              MOV     A,#0AH
0039 9F                SUBB    A,R7
003A E4                CLR     A
003B 9E                SUBB    A,R6
003C 4003              JC      $ + 5H
003E 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 941
0041 900000      R     MOV     DPTR,#serialState
0044 E0                MOVX    A,@DPTR
0045 FE                MOV     R6,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 900000      R     MOV     DPTR,#USBUART_activeCom
004C E0                MOVX    A,@DPTR
004D FD                MOV     R5,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 45  

004E ED                MOV     A,R5
004F 25E0              ADD     A,ACC
0051 2400        R     ADD     A,#LOW USBUART_serialStateBitmap
0053 F582              MOV     DPL,A
0055 E4                CLR     A
0056 3400        R     ADDC    A,#HIGH USBUART_serialStateBitmap
0058 F583              MOV     DPH,A
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
005F 900000      R     MOV     DPTR,#epNumber
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 75F00B            MOV     B,#0BH
0068 A4                MUL     AB
0069 2400        E     ADD     A,#LOW USBUART_EP+0AH
006B F582              MOV     DPL,A
006D E4                CLR     A
006E 3400        E     ADDC    A,#HIGH USBUART_EP+0AH
0070 F583              MOV     DPH,A
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      R     MOV     DPTR,#USBUART_serialStateNotification+04H
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 947
0079 900000      R     MOV     DPTR,#USBUART_activeCom
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 25E0              ADD     A,ACC
0081 2400        R     ADD     A,#LOW USBUART_serialStateBitmap
0083 F582              MOV     DPL,A
0085 E4                CLR     A
0086 3400        R     ADDC    A,#HIGH USBUART_serialStateBitmap
0088 F583              MOV     DPH,A
008A E0                MOVX    A,@DPTR
008B FE                MOV     R6,A
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 54FF              ANL     A,#0FFH
0092 FF                MOV     R7,A
0093 900000      R     MOV     DPTR,#USBUART_serialStateNotification+08H
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 948
0098 900000      R     MOV     DPTR,#USBUART_activeCom
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 25E0              ADD     A,ACC
00A0 2400        R     ADD     A,#LOW USBUART_serialStateBitmap
00A2 F582              MOV     DPL,A
00A4 E4                CLR     A
00A5 3400        R     ADDC    A,#HIGH USBUART_serialStateBitmap
00A7 F583              MOV     DPH,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 46  

00A9 E0                MOVX    A,@DPTR
00AA FE                MOV     R6,A
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE EE                MOV     A,R6
00AF FF                MOV     R7,A
00B0 7E00              MOV     R6,#00H
00B2 900000      R     MOV     DPTR,#USBUART_serialStateNotification+09H
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
00B7 900000      R     MOV     DPTR,#epNumber
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 7B01              MOV     R3,#01H
00BE 7A00        R     MOV     R2,#HIGH USBUART_serialStateNotification
00C0 7900        R     MOV     R1,#LOW USBUART_serialStateNotification
00C2 900000      E     MOV     DPTR,#?_USBUART_LoadInEP?BYTE+04H
00C5 E4                CLR     A
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 740A              MOV     A,#0AH
00CA F0                MOVX    @DPTR,A
00CB 120000      E     LCALL   _USBUART_LoadInEP
                                           ; SOURCE LINE # 951
                                           ; SOURCE LINE # 952
00CE         ?C0058:
00CE 22                RET     
             ; FUNCTION _USBUART_SendSerialState (END)

             ; FUNCTION USBUART_GetSerialState (BEGIN)
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 969
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 25E0              ADD     A,ACC
0008 2400        R     ADD     A,#LOW USBUART_serialStateBitmap
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        R     ADDC    A,#HIGH USBUART_serialStateBitmap
000F F583              MOV     DPH,A
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
                                           ; SOURCE LINE # 970
0016         ?C0059:
0016 22                RET     
             ; FUNCTION USBUART_GetSerialState (END)

             ; FUNCTION USBUART_NotificationIsReady (BEGIN)
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 47  

0005 7400        R     MOV     A,#LOW USBUART_cdcCommInInterruptEp
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH USBUART_cdcCommInInterruptEp
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 75F00B            MOV     B,#0BH
0015 A4                MUL     AB
0016 2400        E     ADD     A,#LOW USBUART_EP+01H
0018 F582              MOV     DPL,A
001A E4                CLR     A
001B 3400        E     ADDC    A,#HIGH USBUART_EP+01H
001D F583              MOV     DPH,A
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
                                           ; SOURCE LINE # 994
0021         ?C0060:
0021 22                RET     
             ; FUNCTION USBUART_NotificationIsReady (END)

             ; FUNCTION _USBUART_SetComPort (BEGIN)
                                           ; SOURCE LINE # 1015
0000 900000      R     MOV     DPTR,#comNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
0005 900000      R     MOV     DPTR,#comNumber
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#USBUART_activeCom
000D E0                MOVX    A,@DPTR
000E FE                MOV     R6,A
000F EE                MOV     A,R6
0010 6F                XRL     A,R7
0011 6015              JZ      ?C0062
0013 900000      R     MOV     DPTR,#comNumber
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 C3                CLR     C
001A 9402              SUBB    A,#02H
001C 500A              JNC     ?C0062
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
001E 900000      R     MOV     DPTR,#comNumber
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#USBUART_activeCom
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
0028         ?C0062:
0028 22                RET     
             ; FUNCTION _USBUART_SetComPort (END)

             ; FUNCTION USBUART_GetComPort (BEGIN)
                                           ; SOURCE LINE # 1040
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 48  

                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
0000 900000      R     MOV     DPTR,#USBUART_activeCom
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1043
0005         ?C0063:
0005 22                RET     
             ; FUNCTION USBUART_GetComPort (END)

             ; FUNCTION _USBUART_Cdc_EpInit (BEGIN)
                                           ; SOURCE LINE # 1071
0000 900000      R     MOV     DPTR,#pEP
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#epNum
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#cdcComNums
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1072
                                           ; SOURCE LINE # 1075
0012 900000      R     MOV     DPTR,#pEP
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 8F82              MOV     DPL,R7
001C 8E83              MOV     DPH,R6
001E 7403              MOV     A,#03H
0020 93                MOVC    A,@A+DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 5403              ANL     A,#03H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#epType
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
002B 900000      R     MOV     DPTR,#pEP
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 8F82              MOV     DPL,R7
0035 8E83              MOV     DPH,R6
0037 7402              MOV     A,#02H
0039 93                MOVC    A,@A+DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 5480              ANL     A,#080H
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 4E                ORL     A,R6
0043 6070              JZ      ?C0064
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 49  

                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
0045 900000      R     MOV     DPTR,#epType
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 6403              XRL     A,#03H
004D 6030              JZ      ?C0065
                                           ; SOURCE LINE # 1080
                                           ; SOURCE LINE # 1081
004F 900000      R     MOV     DPTR,#epNum
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 900000      R     MOV     DPTR,#cdcComNums
0057 E0                MOVX    A,@DPTR
0058 FE                MOV     R6,A
0059 EE                MOV     A,R6
005A FD                MOV     R5,A
005B 7C00              MOV     R4,#00H
005D 7C00              MOV     R4,#00H
005F ED                MOV     A,R5
0060 5401              ANL     A,#01H
0062 FD                MOV     R5,A
0063 7400        R     MOV     A,#LOW USBUART_cdcDataInEp
0065 2D                ADD     A,R5
0066 F582              MOV     DPL,A
0068 7400        R     MOV     A,#HIGH USBUART_cdcDataInEp
006A 3C                ADDC    A,R4
006B F583              MOV     DPH,A
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
006F 900000      R     MOV     DPTR,#cdcComNums
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 4401              ORL     A,#01H
0077 FF                MOV     R7,A
0078 900000      R     MOV     DPTR,#cdcComNums
007B EF                MOV     A,R7
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
007D 8072              SJMP    ?C0067
007F         ?C0065:
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1087
007F 900000      R     MOV     DPTR,#epNum
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 900000      R     MOV     DPTR,#cdcComNums
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 EE                MOV     A,R6
008A 13                RRC     A
008B 13                RRC     A
008C 543F              ANL     A,#03FH
008E FE                MOV     R6,A
008F EE                MOV     A,R6
0090 FD                MOV     R5,A
0091 7C00              MOV     R4,#00H
0093 7C00              MOV     R4,#00H
0095 ED                MOV     A,R5
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 50  

0096 5401              ANL     A,#01H
0098 FD                MOV     R5,A
0099 7400        R     MOV     A,#LOW USBUART_cdcCommInInterruptEp
009B 2D                ADD     A,R5
009C F582              MOV     DPL,A
009E 7400        R     MOV     A,#HIGH USBUART_cdcCommInInterruptEp
00A0 3C                ADDC    A,R4
00A1 F583              MOV     DPH,A
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1088
00A5 900000      R     MOV     DPTR,#cdcComNums
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 4404              ORL     A,#04H
00AD FF                MOV     R7,A
00AE 900000      R     MOV     DPTR,#cdcComNums
00B1 EF                MOV     A,R7
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
00B3 803C              SJMP    ?C0067
00B5         ?C0064:
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
00B5 900000      R     MOV     DPTR,#epType
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA EF                MOV     A,R7
00BB 6403              XRL     A,#03H
00BD 6032              JZ      ?C0067
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
00BF 900000      R     MOV     DPTR,#epNum
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 900000      R     MOV     DPTR,#cdcComNums
00C7 E0                MOVX    A,@DPTR
00C8 FE                MOV     R6,A
00C9 EE                MOV     A,R6
00CA C3                CLR     C
00CB 13                RRC     A
00CC FE                MOV     R6,A
00CD EE                MOV     A,R6
00CE FD                MOV     R5,A
00CF 7C00              MOV     R4,#00H
00D1 7C00              MOV     R4,#00H
00D3 ED                MOV     A,R5
00D4 5401              ANL     A,#01H
00D6 FD                MOV     R5,A
00D7 7400        R     MOV     A,#LOW USBUART_cdcDataOutEp
00D9 2D                ADD     A,R5
00DA F582              MOV     DPL,A
00DC 7400        R     MOV     A,#HIGH USBUART_cdcDataOutEp
00DE 3C                ADDC    A,R4
00DF F583              MOV     DPH,A
00E1 EF                MOV     A,R7
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1096
00E3 900000      R     MOV     DPTR,#cdcComNums
00E6 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBUART_CDC                                                           04/28/2016 18:59:24 PAGE 51  

00E7 FF                MOV     R7,A
00E8 EF                MOV     A,R7
00E9 4402              ORL     A,#02H
00EB FF                MOV     R7,A
00EC 900000      R     MOV     DPTR,#cdcComNums
00EF EF                MOV     A,R7
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1097
                                           ; SOURCE LINE # 1098
00F1         ?C0067:
                                           ; SOURCE LINE # 1099
00F1 900000      R     MOV     DPTR,#cdcComNums
00F4 E0                MOVX    A,@DPTR
00F5 FF                MOV     R7,A
                                           ; SOURCE LINE # 1100
00F6         ?C0069:
00F6 22                RET     
             ; FUNCTION _USBUART_Cdc_EpInit (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2455    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =     41      63
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
