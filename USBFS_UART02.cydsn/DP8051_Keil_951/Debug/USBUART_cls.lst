C51 COMPILER V9.51   USBUART_CLS                                                           04/28/2016 18:59:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_CLS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBUART_cls.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_cls.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2)
                    - PR(.\DP8051_Keil_951\Debug/USBUART_cls.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\USBUART_cls.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USBUART_cls.c
   3          * \version 3.0
   4          *
   5          * \brief
   6          *  This file contains the USB Class request handler.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USBUART_pvt.h"
  17          #include "cyapicallbacks.h"
  18          
  19          #if(USBUART_EXTERN_CLS == USBUART_FALSE)
  20          
  21          /***************************************
  22          * User Implemented Class Driver Declarations.
  23          ***************************************/
  24          /* `#START USER_DEFINED_CLASS_DECLARATIONS` Place your declaration here */
  25          
  26          /* `#END` */
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: USBUART_DispatchClassRqst
  31          ****************************************************************************//**
  32          *  This routine dispatches class specific requests depend on interface class.
  33          *
  34          * \return
  35          *  requestHandled.
  36          *
  37          * \reentrant
  38          *  No.
  39          *
  40          *******************************************************************************/
  41          uint8 USBUART_DispatchClassRqst(void) 
  42          {
  43   1          uint8 requestHandled;
  44   1          uint8 interfaceNumber;
  45   1      
  46   1          /* Get interface to which request is intended. */
  47   1          switch (USBUART_bmRequestTypeReg & USBUART_RQST_RCPT_MASK)
  48   1          {
  49   2              case USBUART_RQST_RCPT_IFC:
  50   2                  /* Class-specific request directed to interface: wIndexLoReg 
  51   2                  * contains interface number.
  52   2                  */
  53   2                  interfaceNumber = (uint8) USBUART_wIndexLoReg;
C51 COMPILER V9.51   USBUART_CLS                                                           04/28/2016 18:59:25 PAGE 2   

  54   2                  break;
  55   2              
  56   2              case USBUART_RQST_RCPT_EP:
  57   2                  /* Class-specific request directed to endpoint: wIndexLoReg contains 
  58   2                  * endpoint number. Find interface related to endpoint, 
  59   2                  */
  60   2                  interfaceNumber = USBUART_EP[USBUART_wIndexLoReg & USBUART_DIR_UNUSED].interface;
  61   2                  break;
  62   2                  
  63   2              default:
  64   2                  /* Default interface is zero. */
  65   2                  interfaceNumber = 0u;
  66   2                  break;
  67   2          }
  68   1      
  69   1      #if (defined(USBUART_ENABLE_HID_CLASS) ||\
  70   1                  defined(USBUART_ENABLE_AUDIO_CLASS) ||\
  71   1                  defined(USBUART_ENABLE_CDC_CLASS) ||\
  72   1                  USBUART_ENABLE_MSC_CLASS)
  73   1      
  74   1          /* Handle class request depends on interface type. */
  75   1          switch (USBUART_interfaceClass[interfaceNumber])
  76   1          {
  77   2          #if defined(USBUART_ENABLE_HID_CLASS)
  78   2              case USBUART_CLASS_HID:
  79   2                  requestHandled = USBUART_DispatchHIDClassRqst();
  80   2                  break;
  81   2          #endif /* (USBUART_ENABLE_HID_CLASS) */
  82   2                  
  83   2          #if defined(USBUART_ENABLE_AUDIO_CLASS)
                      case USBUART_CLASS_AUDIO:
                          requestHandled = USBUART_DispatchAUDIOClassRqst();
                          break;
                  #endif /* (USBUART_CLASS_AUDIO) */
  88   2                  
  89   2          #if defined(USBUART_ENABLE_CDC_CLASS)
  90   2              case USBUART_CLASS_CDC:
  91   2                  requestHandled = USBUART_DispatchCDCClassRqst();
  92   2                  break;
  93   2          #endif /* (USBUART_ENABLE_CDC_CLASS) */
  94   2              
  95   2          #if (USBUART_ENABLE_MSC_CLASS)
                      case USBUART_CLASS_MSD:
                      #if (USBUART_HANDLE_MSC_REQUESTS)
                          /* MSC requests are handled by the component. */
                          requestHandled = USBUART_DispatchMSCClassRqst();
                      #elif defined(USBUART_DISPATCH_MSC_CLASS_RQST_CALLBACK)
                          /* MSC requests are handled by user defined callbcak. */
                          requestHandled = USBUART_DispatchMSCClassRqst_Callback();
                      #else
                          /* MSC requests are not handled. */
                          requestHandled = USBUART_FALSE;
                      #endif /* (USBUART_HANDLE_MSC_REQUESTS) */
                          break;
                  #endif /* (USBUART_ENABLE_MSC_CLASS) */
 109   2              
 110   2              default:
 111   2                  /* Request is not handled: unknown class request type. */
 112   2                  requestHandled = USBUART_FALSE;
 113   2                  break;
 114   2          }
 115   1      #else /*No class is defined*/
C51 COMPILER V9.51   USBUART_CLS                                                           04/28/2016 18:59:25 PAGE 3   

                  if (0u != interfaceNumber)
                  {
                      /* Suppress warning message */
                  }
                  requestHandled = USBUART_FALSE;
              #endif /*HID or AUDIO or MSC or CDC class enabled*/
 122   1      
 123   1          /* `#START USER_DEFINED_CLASS_CODE` Place your Class request here */
 124   1      
 125   1          /* `#END` */
 126   1      
 127   1      #ifdef USBUART_DISPATCH_CLASS_RQST_CALLBACK
                  if (USBUART_FALSE == requestHandled)
                  {
                      requestHandled = USBUART_DispatchClassRqst_Callback(interfaceNumber);
                  }
              #endif /* (USBUART_DISPATCH_CLASS_RQST_CALLBACK) */
 133   1      
 134   1          return (requestHandled);
 135   1      }
 136          
 137          
 138          /*******************************************************************************
 139          * Additional user functions supporting Class Specific Requests
 140          ********************************************************************************/
 141          
 142          /* `#START CLASS_SPECIFIC_FUNCTIONS` Place any additional functions here */
 143          
 144          /* `#END` */
 145          
 146          #endif /* USBUART_EXTERN_CLS */
 147          
 148          
 149          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_CLS                                                           04/28/2016 18:59:25 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBUART_DispatchClassRqst (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 47
0000 906000            MOV     DPTR,#06000H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5403              ANL     A,#03H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A 120000      E     LCALL   ?C?CCASE
000D 0000        R     DW      ?C0002
000F 01                DB      01H
0010 0000        R     DW      ?C0003
0012 02                DB      02H
0013 0000              DW      00H
0015 0000        R     DW      ?C0004
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0017         ?C0002:
                                           ; SOURCE LINE # 53
0017 906004            MOV     DPTR,#06004H
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#interfaceNumber
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
0021 8025              SJMP    ?C0001
                                           ; SOURCE LINE # 56
0023         ?C0003:
                                           ; SOURCE LINE # 60
0023 906004            MOV     DPTR,#06004H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 547F              ANL     A,#07FH
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 75F00B            MOV     B,#0BH
0030 A4                MUL     AB
0031 2400        E     ADD     A,#LOW USBUART_EP+0AH
0033 F582              MOV     DPL,A
0035 E4                CLR     A
0036 3400        E     ADDC    A,#HIGH USBUART_EP+0AH
0038 F583              MOV     DPH,A
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#interfaceNumber
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0041 8005              SJMP    ?C0001
                                           ; SOURCE LINE # 63
0043         ?C0004:
                                           ; SOURCE LINE # 65
0043 900000      R     MOV     DPTR,#interfaceNumber
0046 E4                CLR     A
C51 COMPILER V9.51   USBUART_CLS                                                           04/28/2016 18:59:25 PAGE 5   

0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0048         ?C0001:
                                           ; SOURCE LINE # 75
0048 900000      R     MOV     DPTR,#interfaceNumber
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      E     MOV     DPTR,#USBUART_interfaceClass
0050 E0                MOVX    A,@DPTR
0051 FC                MOV     R4,A
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054 FD                MOV     R5,A
0055 8D82              MOV     DPL,R5
0057 8C83              MOV     DPH,R4
0059 E582              MOV     A,DPL
005B 2F                ADD     A,R7
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3583              ADDC    A,DPH
0061 F583              MOV     DPH,A
0063 E4                CLR     A
0064 93                MOVC    A,@A+DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 120000      E     LCALL   ?C?CCASE
006A 0000        R     DW      ?C0007
006C 02                DB      02H
006D 0000        R     DW      ?C0006
006F 03                DB      03H
0070 0000              DW      00H
0072 0000        R     DW      ?C0008
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
0074         ?C0006:
                                           ; SOURCE LINE # 79
0074 120000      E     LCALL   USBUART_DispatchHIDClassRqst
0077 900000      R     MOV     DPTR,#requestHandled
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
007C 800F              SJMP    ?C0005
                                           ; SOURCE LINE # 90
007E         ?C0007:
                                           ; SOURCE LINE # 91
007E 120000      E     LCALL   USBUART_DispatchCDCClassRqst
0081 900000      R     MOV     DPTR,#requestHandled
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
0086 8005              SJMP    ?C0005
                                           ; SOURCE LINE # 110
0088         ?C0008:
                                           ; SOURCE LINE # 112
0088 900000      R     MOV     DPTR,#requestHandled
008B E4                CLR     A
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
008D         ?C0005:
                                           ; SOURCE LINE # 134
C51 COMPILER V9.51   USBUART_CLS                                                           04/28/2016 18:59:25 PAGE 6   

008D 900000      R     MOV     DPTR,#requestHandled
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
                                           ; SOURCE LINE # 135
0092         ?C0009:
0092 22                RET     
             ; FUNCTION USBUART_DispatchClassRqst (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    147    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
